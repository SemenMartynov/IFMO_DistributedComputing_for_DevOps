---
- name: Setup sudo access
  hosts: wordpress_servers
  become: true
  tasks:
    - name: Add current user to sudo group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: sudo
        append: true

    - name: Set up sudo for current user
      ansible.builtin.copy:
        content: "{{ ansible_user }} ALL=(ALL) NOPASSWD:ALL"
        dest: "/etc/sudoers.d/{{ ansible_user }}"
        mode: "0o440"
        validate: /usr/sbin/visudo -cf %s

- name: Setup ansible user
  hosts: wordpress_servers
  become: true
  tasks:
    - name: Create ansible user
      ansible.builtin.user:
        name: ansible
        shell: /bin/bash
        groups: sudo
        append: true
        create_home: true
        state: present

    - name: Set up sudo for ansible user
      ansible.builtin.copy:
        content: "ansible ALL=(ALL) NOPASSWD:ALL"
        dest: /etc/sudoers.d/ansible
        mode: "0o440"
        validate: /usr/sbin/visudo -cf %s

    # - name: Add authorized key
    #   ansible.builtin.authorized_key:
    #     user: ansible
    #     state: present
    #     key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

- name: Deploy WordPress with Docker
  hosts: wordpress_servers
  become: true
  vars_files:
    - vars/main.yml

  tasks:
    - name: Install prerequisites
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
        state: present
        update_cache: true

    - name: Add Docker GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ 'arm64' if ansible_architecture == 'aarch64' else ansible_architecture }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        update_cache: true

    - name: Install Docker and Docker Compose Plugin
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
        state: present
        update_cache: true

    - name: Ensure Docker service is started and enabled
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true
      become: true

    - name: Set correct permissions for Docker socket
      ansible.builtin.file:
        path: /var/run/docker.sock
        state: file
        mode: '0666'
      become: true

    - name: Download Docker Compose
      ansible.builtin.get_url:
        url: "https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-{{ ansible_architecture }}"
        dest: /usr/local/bin/docker-compose
        mode: '0755'
      become: true

    - name: Create Docker CLI plugins directory
      ansible.builtin.file:
        path: /usr/local/lib/docker/cli-plugins
        state: directory
        mode: '0755'
      become: true

    - name: Remove existing Docker Compose plugin if exists
      ansible.builtin.file:
        path: /usr/local/lib/docker/cli-plugins/docker-compose
        state: absent
      become: true

    - name: Create symlink for Docker Compose plugin
      ansible.builtin.file:
        src: /usr/local/bin/docker-compose
        dest: /usr/local/lib/docker/cli-plugins/docker-compose
        state: link
      become: true

    - name: Test Docker Compose
      ansible.builtin.command:
        cmd: docker-compose --version
      register: compose_version
      changed_when: false
      failed_when: false

    - name: Install community.docker collection
      ansible.builtin.command:
        cmd: ansible-galaxy collection install community.docker
      register: galaxy_result
      changed_when: "'was installed successfully' in galaxy_result.stdout or 'is already installed' in galaxy_result.stdout"
      become: true

    - name: Create docker group
      ansible.builtin.group:
        name: docker
        state: present

    - name: Create project group
      ansible.builtin.group:
        name: "{{ project_group }}"
        state: present

    - name: Create project user
      ansible.builtin.user:
        name: "{{ project_user }}"
        group: "{{ project_group }}"
        home: "{{ project_home }}"
        shell: /bin/bash
        create_home: true
        state: present

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ project_user }}"
        groups: docker
        append: true

    - name: Wait for group changes to take effect
      ansible.builtin.meta: flush_handlers

    - name: Pause for Docker permissions to apply
      ansible.builtin.pause:
        seconds: 5

    - name: Create project directory
      ansible.builtin.file:
        path: "{{ project_dir }}"
        state: directory
        mode: "0o755"
        owner: "{{ project_user }}"
        group: "{{ project_group }}"

    - name: Create ansible tmp directory for project user
      ansible.builtin.file:
        path: "{{ project_home }}/.ansible/tmp"
        state: directory
        mode: "0o700"
        owner: "{{ project_user }}"
        group: "{{ project_group }}"
        recurse: true

    - name: Create .env file
      ansible.builtin.copy:
        content: |
          MYSQL_ROOT_PASSWORD={{ mysql_root_password }}
          MYSQL_DATABASE={{ mysql_database }}
          MYSQL_USER={{ mysql_user }}
          MYSQL_PASSWORD={{ mysql_password }}
        dest: "{{ project_dir }}/.env"
        owner: "{{ project_user }}"
        group: "{{ project_group }}"
        mode: "0o600"

    - name: Copy prometheus config
      ansible.builtin.copy:
        src: prometheus.yml.j2
        dest: "{{ project_dir }}/prometheus.yml"
        owner: "{{ project_user }}"
        group: "{{ project_group }}"
        mode: "0o644"

    - name: Шаблонизировать docker-compose.yml
      ansible.builtin.template:
        src: app-docker-compose.yml.j2
        dest: "{{ project_dir }}/docker-compose.yml"
        mode: "0o644"

    - name: Copy MySQL configuration
      ansible.builtin.copy:
        src: mysql.cnf
        dest: "{{ project_dir }}/mysql.cnf"
        owner: "{{ project_user }}"
        group: "{{ project_group }}"
        mode: "0o644"

    - name: Управление основным Docker Compose стеком
      community.docker.docker_compose_v2:
        project_src: "{{ project_dir }}"
        files:
          - docker-compose.yml
        state: present
      become: true

    - name: Шаблонизировать docker-compose-monitoring.yml
      ansible.builtin.template:
        src: monitoring-docker-compose.yml.j2
        dest: "{{ project_dir }}/docker-compose-monitoring.yml"
        mode: "0o644"

    - name: Управление стеком мониторинга
      community.docker.docker_compose_v2:
        project_src: "{{ project_dir }}"
        files:
          - docker-compose-monitoring.yml
        state: present
      become: true
 
---
- name: Развернуть WordPress с MySQL
  hosts: web
  become: true
  vars:
    mysql_image: mysql:8.3
    wordpress_image: wordpress:latest
    MYSQL_ROOT_PASSWORD: rootpass
    MYSQL_DATABASE: wordpress
    MYSQL_USER: wpuser
    MYSQL_PASSWORD: wppass
    MYSQL_REPLICA_USER: replica
    MYSQL_REPLICA_PASSWORD: slavepass
    WORDPRESS_DB_HOST: mysql_master:3306
  roles:
    - docker_installation

  tasks:
    - name: Установить PyMySQL для работы с MySQL
      ansible.builtin.apt:
        name: python3-pymysql
        state: present
      become: true

    - name: Скопировать конфиги MySQL
      loop:
        - master.cnf
        - slave.cnf
      copy:
        src: "{{ item }}"
        dest: "/home/user/{{ item }}"
        mode: '0644'

    - name: Создать сеть Docker
      community.docker.docker_network:
        name: wp_net

    - name: Создать Docker-тома
      community.docker.docker_volume:
        name: "{{ item }}"
      loop:
        - mysql_master_data
        - mysql_slave_data
        - wordpress_data

    - name: Временно запустить mysql_master с пробросом порта для прямого подключения
      community.docker.docker_container:
        name: mysql_master
        image: "{{ mysql_image }}"
        restart_policy: always
        ports:
          - "3306:3306"
        volumes:
          - mysql_master_data:/var/lib/mysql
          - /home/user/master.cnf:/etc/mysql/conf.d/master.cnf
        networks:
          - name: wp_net
        env:
          MYSQL_ROOT_PASSWORD: "{{ MYSQL_ROOT_PASSWORD }}"
          MYSQL_DATABASE: "{{ MYSQL_DATABASE }}"
          MYSQL_USER: "{{ MYSQL_USER }}"
          MYSQL_PASSWORD: "{{ MYSQL_PASSWORD }}"
        recreate: true

    - name: Ждать, пока MySQL Master полностью запустится
      community.mysql.mysql_info:
        login_host: 127.0.0.1
        login_port: 3306
        login_user: root
        login_password: "{{ MYSQL_ROOT_PASSWORD }}"
      register: mysql_master_ready
      retries: 10
      delay: 6
      until: mysql_master_ready is succeeded

    - name: Создать пользователя репликации
      community.mysql.mysql_query:
        login_host: 127.0.0.1
        login_port: 3306
        login_user: root
        login_password: "{{ MYSQL_ROOT_PASSWORD }}"
        query:
          - "CREATE USER IF NOT EXISTS '{{ MYSQL_REPLICA_USER }}'@'%' IDENTIFIED WITH mysql_native_password BY '{{ MYSQL_REPLICA_PASSWORD }}'"
          - "GRANT REPLICATION SLAVE ON *.* TO '{{ MYSQL_REPLICA_USER }}'@'%'"
          - "FLUSH PRIVILEGES"
          - "FLUSH TABLES WITH READ LOCK"

    - name: Получить статус мастера
      community.mysql.mysql_replication:
        mode: getprimary
        login_host: 127.0.0.1
        login_port: 3306
        login_user: root
        login_password: "{{ MYSQL_ROOT_PASSWORD }}"
      register: master_status

    - name: Временно запустить mysql_slave с пробросом порта для прямого подключения
      community.docker.docker_container:
        name: mysql_slave
        image: "{{ mysql_image }}"
        restart_policy: always
        ports:
          - "3307:3306"
        volumes:
          - mysql_slave_data:/var/lib/mysql
          - /home/user/slave.cnf:/etc/mysql/conf.d/slave.cnf
        networks:
          - name: wp_net
        env:
          MYSQL_ROOT_PASSWORD: "{{ MYSQL_ROOT_PASSWORD }}"
          MYSQL_DATABASE: "{{ MYSQL_DATABASE }}"
          MYSQL_USER: "{{ MYSQL_USER }}"
          MYSQL_PASSWORD: "{{ MYSQL_PASSWORD }}"
        recreate: true

    - name: Ждать, пока MySQL Slave полностью запустится
      community.mysql.mysql_info:
        login_host: 127.0.0.1
        login_port: 3307
        login_user: root
        login_password: "{{ MYSQL_ROOT_PASSWORD }}"
      register: mysql_slave_ready
      retries: 10
      delay: 6
      until: mysql_slave_ready is succeeded

    - name: Настройка репликации на mysql_slave
      community.mysql.mysql_query:
        login_host: 127.0.0.1
        login_port: 3307
        login_user: root
        login_password: "{{ MYSQL_ROOT_PASSWORD }}"
        query:
          - >-
            CHANGE REPLICATION SOURCE TO
              SOURCE_HOST='mysql_master',
              SOURCE_USER='{{ MYSQL_REPLICA_USER }}',
              SOURCE_PASSWORD='{{ MYSQL_REPLICA_PASSWORD }}',
              SOURCE_LOG_FILE='{{ master_status.File }}',
              SOURCE_LOG_POS={{ master_status.Position }}
          - "START REPLICA"

    - name: Перезапустить mysql_master и mysql_slave без проброса портов
      community.docker.docker_container:
        name: "{{ item.name }}"
        image: "{{ mysql_image }}"
        restart_policy: always
        volumes: "{{ item.volumes }}"
        networks:
          - name: wp_net
        env:
          MYSQL_ROOT_PASSWORD: "{{ MYSQL_ROOT_PASSWORD }}"
          MYSQL_DATABASE: "{{ MYSQL_DATABASE }}"
          MYSQL_USER: "{{ MYSQL_USER }}"
          MYSQL_PASSWORD: "{{ MYSQL_PASSWORD }}"
        recreate: true
        state: started
      loop:
        - name: mysql_master
          volumes:
            - mysql_master_data:/var/lib/mysql
            - /home/user/master.cnf:/etc/mysql/conf.d/master.cnf
        - name: mysql_slave
          volumes:
            - mysql_slave_data:/var/lib/mysql
            - /home/user/slave.cnf:/etc/mysql/conf.d/slave.cnf

    - name: Запустить WordPress контейнер
      community.docker.docker_container:
        name: wordpress
        image: "{{ wordpress_image }}"
        restart_policy: always
        ports:
          - "80:80"
        volumes:
          - wordpress_data:/var/www/html
        networks:
          - name: wp_net
        env:
          WORDPRESS_DB_HOST: "{{ WORDPRESS_DB_HOST }}"
          WORDPRESS_DB_USER: "{{ MYSQL_USER }}"
          WORDPRESS_DB_PASSWORD: "{{ MYSQL_PASSWORD }}"
          WORDPRESS_DB_NAME: "{{ MYSQL_DATABASE }}"
        state: started

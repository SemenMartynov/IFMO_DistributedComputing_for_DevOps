---
- name: Deploy WordPress with Docker
  hosts: wordpress
  become: yes
  vars_files:
    - vars/main.yml

  tasks:
    - name: Install system prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-docker
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      notify: restart sshd

    - name: Create replication directories
      file:
        path: "{{ item }}"
        state: directory
        mode: 0755
      loop:
        - /opt/wordpress/mysql-master
        - /opt/wordpress/mysql-slave
    
    - name: Deploy Docker Compose with replication
      template:
        src: templates/docker-compose-replication.yml.j2
        dest: /opt/wordpress/docker-compose.yml
        mode: 0644

    - name: Create database snapshot
      command: |
        docker exec {{ item }} mysqldump -uroot -p{{ DB_ROOT_PASSWORD }} --all-databases --single-transaction --flush-logs --master-data=2 > /opt/wordpress/db_snapshot.sql
      register: snapshot_result
      changed_when: false
      loop: "{{ ansible_play_hosts }}"
      when: inventory_hostname == ansible_play_hosts[0]  # Выполняем только на первом хосте
      delegate_to: "{{ item }}"
      run_once: true

    - name: Stop old DB container
      command: docker stop db
      ignore_errors: yes

    - name: Start WordPress with replication
      command: docker compose -f /opt/wordpress/docker-compose.yml up -d
      args:
        chdir: /opt/wordpress
      environment:
        DB_ROOT_PASSWORD: "{{ DB_ROOT_PASSWORD }}"
        DB_NAME: "{{ DB_NAME }}"
        DB_USER: "{{ DB_USER }}"
        DB_PASSWORD: "{{ DB_PASSWORD }}"
        MYSQL_MASTER_ROOT_PASSWORD: "{{ DB_ROOT_PASSWORD }}"
        MYSQL_SLAVE_ROOT_PASSWORD: "{{ DB_ROOT_PASSWORD }}"

    - name: Restore snapshot to master
      command: |
        docker exec -i mysql-master mysql -uroot -p{{ DB_ROOT_PASSWORD }} < /opt/wordpress/db_snapshot.sql
      when: snapshot_result is succeeded and inventory_hostname == ansible_play_hosts[0]

    # Настраиваем репликацию
    - name: Configure replication user on master
      command: |
        docker exec mysql-master mysql -uroot -p{{ DB_ROOT_PASSWORD }} -e "
        CREATE USER 'repl'@'%' IDENTIFIED BY 'repl_password';
        GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';
        FLUSH PRIVILEGES;"
      register: master_setup
      changed_when: false


    - name: Get master status
      command: |
        docker exec mysql-master mysql -uroot -p{{ DB_ROOT_PASSWORD }} -e "SHOW MASTER STATUS\G"
      register: master_status
      changed_when: false


    - name: Configure slave replication
      command: |
        docker exec mysql-slave mysql -uroot -p{{ DB_ROOT_PASSWORD }} -e "
        CHANGE MASTER TO
        MASTER_HOST='mysql-master',
        MASTER_USER='repl',
        MASTER_PASSWORD='repl_password',
        MASTER_LOG_FILE='{{ master_status.stdout | regex_search('File: (.*)', '\1') | first }}',
        MASTER_LOG_POS={{ master_status.stdout | regex_search('Position: (.*)', '\1') | first }};
        START SLAVE;"
      when: master_status is succeeded

    - name: Verify replication status
      command: docker exec mysql-slave mysql -uroot -p{{ DB_ROOT_PASSWORD }} -e "SHOW SLAVE STATUS\G"
      register: slave_status
      changed_when: false

    - name: Show replication status
      debug:
        var: slave_status.stdout_lines

  handlers:
    - import_tasks: handlers/main.yml
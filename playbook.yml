---
- name: Развернуть WordPress с MySQL
  hosts: web
  become: true
  vars:
    mysql_image: mysql:8.3
    wordpress_image: wordpress:latest
    mysql_root_password: rootpass
    mysql_database: wordpress
    mysql_user: wpuser
    mysql_password: wppass
    mysql_replica_user: replica
    mysql_replica_password: slavepass
    wordpress_db_host: mysql_master:3306
    server_user: user

  roles:
    - docker_installation

  tasks:
    - name: Установить PyMySQL для работы с MySQL
      ansible.builtin.apt:
        name: python3-pymysql
        state: present

    - name: Скопировать конфиги MySQL
      loop:
        - master.cnf
        - slave.cnf
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "/home/{{ server_user }}/{{ item }}"
        mode: '0644'

    - name: Создать сеть Docker
      community.docker.docker_network:
        name: wp_net

    - name: Создать Docker-тома
      community.docker.docker_volume:
        name: "{{ item }}"
      loop:
        - mysql_master_data
        - mysql_slave_data
        - wordpress_data

    - name: Запустить mysql_master
      community.docker.docker_container:
        name: mysql_master
        image: "{{ mysql_image }}"
        restart_policy: always
        volumes:
          - mysql_master_data:/var/lib/mysql
          - "/home/{{ server_user }}/master.cnf:/etc/mysql/conf.d/master.cnf"
        networks:
          - name: wp_net
        env:
          MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
          MYSQL_DATABASE: "{{ mysql_database }}"
          MYSQL_USER: "{{ mysql_user }}"
          MYSQL_PASSWORD: "{{ mysql_password }}"
        recreate: false
        state: started
      register: mysql_master_container

    - name: Запустить mysql_slave
      community.docker.docker_container:
        name: mysql_slave
        image: "{{ mysql_image }}"
        restart_policy: always
        volumes:
          - mysql_slave_data:/var/lib/mysql
          - "/home/{{ server_user }}/slave.cnf:/etc/mysql/conf.d/slave.cnf"
        networks:
          - name: wp_net
        env:
          MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
          MYSQL_DATABASE: "{{ mysql_database }}"
          MYSQL_USER: "{{ mysql_user }}"
          MYSQL_PASSWORD: "{{ mysql_password }}"
        recreate: false
        state: started
      register: mysql_slave_container

    - name: Записать IP-адреса mysql_master и mysql_slave в переменные
      ansible.builtin.set_fact:
        mysql_master_ip: "{{ mysql_master_container.container.NetworkSettings.Networks.wp_net.IPAddress }}"
        mysql_slave_ip: "{{ mysql_slave_container.container.NetworkSettings.Networks.wp_net.IPAddress }}"

    - name: Ждать, пока MySQL Master полностью запустится
      ansible.builtin.wait_for:
        host: "{{ mysql_master_ip }}"
        port: 3306
        timeout: 180
        state: started

    - name: Создать пользователя репликации
      community.mysql.mysql_user:
        name: "{{ mysql_replica_user }}"
        host: "%"
        password: "{{ mysql_replica_password }}"
        priv: "*.*:REPLICATION SLAVE"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        login_host: "{{ mysql_master_ip }}"
        state: present
        column_case_sensitive: false

    - name: Получить статус мастера
      community.mysql.mysql_replication:
        mode: getprimary
        login_host: "{{ mysql_master_ip }}"
        login_port: 3306
        login_user: root
        login_password: "{{ mysql_root_password }}"
      register: master_status

    - name: Ждать, пока MySQL Slave полностью запустится
      ansible.builtin.wait_for:
        host: "{{ mysql_slave_ip }}"
        port: 3306
        timeout: 180
        state: started

    - name: Остановить репликацию на mysql_slave
      community.mysql.mysql_replication:
        mode: stopreplica
        login_host: "{{ mysql_slave_ip }}"
        login_port: 3306
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Настройка репликации на mysql_slave
      community.mysql.mysql_replication:
        mode: changereplication
        login_host: "{{ mysql_slave_ip }}"
        login_port: 3306
        login_user: root
        login_password: "{{ mysql_root_password }}"
        primary_host: "{{ mysql_master_ip }}"
        primary_log_file: "{{ master_status.File }}"
        primary_log_pos: "{{ master_status.Position }}"
        primary_user: "{{ mysql_replica_user }}"
        primary_password: "{{ mysql_replica_password }}"

    - name: Запустить репликацию на mysql_slave
      community.mysql.mysql_replication:
        mode: startreplica
        login_host: "{{ mysql_slave_ip }}"
        login_port: 3306
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Запустить WordPress контейнер
      community.docker.docker_container:
        name: wordpress
        image: "{{ wordpress_image }}"
        restart_policy: always
        ports:
          - "80:80"
        volumes:
          - wordpress_data:/var/www/html
        networks:
          - name: wp_net
        env:
          WORDPRESS_DB_HOST: "{{ wordpress_db_host }}"
          WORDPRESS_DB_USER: "{{ mysql_user }}"
          WORDPRESS_DB_PASSWORD: "{{ mysql_password }}"
          WORDPRESS_DB_NAME: "{{ mysql_database }}"
        state: started

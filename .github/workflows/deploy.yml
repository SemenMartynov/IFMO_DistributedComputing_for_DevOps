name: Terraform & Deploy

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (plan, apply, destroy, deploy)'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
          - deploy

jobs:
  terraform:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy' }}
    env:
      TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
      TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
      TF_VAR_ssh_key: ${{ secrets.SSH_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.3

      - name: Set up Yandex Cloud service account key
        working-directory: ./infra
        run: |
          echo '${{ secrets.YC_KEY_JSON }}' > ./authorized_key.json

      - name: Terraform Initialize
        working-directory: ./infra
        run: terraform init -backend-config="access_key=$ACCESS_KEY" -backend-config="secret_key=$SECRET_KEY"
        env:
          ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}

      - name: Terraform Plan
        working-directory: ./infra
        if: ${{ github.event.inputs.action == 'plan' }}
        run: terraform plan
        env:
          ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}

      - name: Terraform Apply
        working-directory: ./infra
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve
        env:
          ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}

      - name: Terraform Destroy
        working-directory: ./infra
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -auto-approve
        env:
          ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}

  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'deploy' }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH connection
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no denis@${{ secrets.SERVER_IP }} "echo 'SSH Connection Successful!'"

      - name: Install Jinja2
        run: pip install jinja2-cli

      - name: Generate inventory from template
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          mkdir -p ansible/inventory/generated
          jinja2 ansible/inventory/template.yml.j2 -D server_ip="$SERVER_IP" > ansible/inventory/generated/production.yml

      - name: Run Ansible
        run: |
          ansible-playbook \
            -i ansible/inventory/generated/production.yml \
            ansible/site.yml

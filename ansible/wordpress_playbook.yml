- name: Deploy WordPress with MySQL Master-Replica
  hosts: all
  become: true
  vars:
    docker_compose_path: "/opt/wordpress"
    wordpress_db_name: "wordpress"
    wordpress_db_user: "wp_user"
    wordpress_db_password: "wp_password"
    wordpress_db_root_password: "rootpassword"
    repl_user: "repl"
    repl_password: "replpass"
    master_host: "mysql_master"
  tasks:
    - name: Install Docker and Compose plugin
      apt:
        name:
          - docker.io
          - docker-compose-plugin
        state: present
        update_cache: true

    - name: Enable and start Docker service
      systemd:
        name: docker
        enabled: true
        state: started

    - name: Create Docker Compose directory
      file:
        path: "{{ docker_compose_path }}"
        state: directory
        mode: '0755'

    - name: Copy Docker Compose and config files
      copy:
        src: "{{ item.src }}"
        dest: "{{ docker_compose_path }}/{{ item.dest }}"
        mode: '0644'
      loop:
        - { src: 'docker-compose.yml', dest: 'docker-compose.yml' }
        - { src: 'nginx.conf', dest: 'nginx.conf' }
        - { src: 'master.conf', dest: 'master.conf' }
        - { src: 'replica.conf', dest: 'replica.conf' }

    - name: Bring up containers
      community.docker.docker_compose:
        project_src: "{{ docker_compose_path }}"
        state: present

    - name: Wait for mysql_master to be ready
      shell: docker exec mysql_master mysqladmin ping -u root -p{{ wordpress_db_root_password }}
      register: result
      retries: 10
      delay: 5
      until: result.rc == 0
      changed_when: false

    - name: Dump WordPress database from master
      shell: docker exec mysql_master sh -c "exec mysqldump -u root -p{{ wordpress_db_root_password }} {{ wordpress_db_name }}"
      register: dump_result
      changed_when: false
      failed_when: dump_result.rc != 0

    - name: Save DB dump to file
      copy:
        content: "{{ dump_result.stdout }}"
        dest: "{{ docker_compose_path }}/wordpress.sql"
        mode: '0644'

    - name: Copy DB dump into mysql_master container
      shell: docker cp {{ docker_compose_path }}/wordpress.sql mysql_master:/wordpress.sql

    - name: Import dump into mysql_master
      shell: docker exec mysql_master sh -c "mysql -u root -p{{ wordpress_db_root_password }} {{ wordpress_db_name }} < /wordpress.sql"

    - name: Create replication user on master
      shell: >
        docker exec mysql_master mysql -u root -p{{ wordpress_db_root_password }} -e "
        CREATE USER IF NOT EXISTS '{{ repl_user }}'@'%' IDENTIFIED BY '{{ repl_password }}';
        GRANT REPLICATION SLAVE ON *.* TO '{{ repl_user }}'@'%';
        FLUSH PRIVILEGES;"

    - name: Get master status
      community.mysql.mysql_replication:
        login_user: root
        login_password: "{{ wordpress_db_root_password }}"
        mode: get_master
        login_host: 127.0.0.1
      register: master_status

    - name: Set master log facts
      set_fact:
        master_log_file: "{{ master_status.File }}"
        master_log_pos: "{{ master_status.Position }}"

    - name: Wait for mysql_replica to be ready
      shell: docker exec mysql_replica mysqladmin ping -u root -p{{ wordpress_db_root_password }}
      register: result
      retries: 10
      delay: 5
      until: result.rc == 0
      changed_when: false

    - name: Configure replication on replica
      community.mysql.mysql_replication:
        mode: change_master
        login_user: root
        login_password: "{{ wordpress_db_root_password }}"
        master_host: "{{ master_host }}"
        master_user: "{{ repl_user }}"
        master_password: "{{ repl_password }}"
        master_log_file: "{{ master_log_file }}"
        master_log_pos: "{{ master_log_pos }}"
        master_auto_position: no
        login_host: 127.0.0.1

    - name: Start slave on replica
      community.mysql.mysql_replication:
        login_user: root
        login_password: "{{ wordpress_db_root_password }}"
        mode: start_slave
        login_host: 127.0.0.1

    - name: Check slave status
      shell: docker exec mysql_replica mysql -u root -p{{ wordpress_db_root_password }} -e "SHOW SLAVE STATUS\G"
      register: slave_status_output
      changed_when: false

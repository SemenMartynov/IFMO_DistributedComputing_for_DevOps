- name: Deploy WordPress
  hosts: all
  become: true
  vars:
    docker_compose_path: "/opt/wordpress"
    wordpress_db_name: "wordpress"
    wordpress_db_user: "wp_user"
    wordpress_db_password: "wp_password"
    wordpress_db_root_password: "rootpassword"
    repl_user: "repl"
    repl_password: "replpass"
  tasks:
    - name: Install dependencies
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - python3-pymysql
        state: present
        update_cache: true
  
    - name: Add GPG-key Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
  
    - name: Docker Repo
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release | lower }} stable"
        state: present
        filename: docker
  
    - name: Install required packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - python3-pip
          - docker-compose-plugin
        state: present
        update_cache: true

    - name: Ensure certificate directory exists
      become: true
      file:
        path: /etc/ssl/wordpress
        state: directory
        mode: '0755'

    - name: Generate private key
      community.crypto.openssl_privatekey:
        path: /etc/ssl/wordpress/privkey.pem
        size: 2048
        type: RSA
        mode: '0600'

    - name: Generate self-signed certificate with IP
      community.crypto.x509_certificate:
        path: /etc/ssl/wordpress/fullchain.pem
        privatekey_path: /etc/ssl/wordpress/privkey.pem
        provider: selfsigned
        selfsigned_not_after: "+365d"
        selfsigned_not_after: "+365d"
        selfsigned_version: 3
        selfsigned_create_subject_key_identifier: create_if_not_provided
        mode: '0644'

    - name: Enable and start Docker service
      systemd:
        name: docker
        enabled: true
        state: started

    - name: Create Docker Compose directory
      file:
        path: "{{ docker_compose_path }}"
        state: directory
        mode: '0755'

    - name: Copy Docker Compose file
      copy:
        src: docker-compose.yml
        dest: "{{ docker_compose_path }}/docker-compose.yml"
        mode: '0644'

    - name: Copy Nginx Config File
      copy:
        src: nginx.conf
        dest: "{{ docker_compose_path }}/nginx.conf"
        mode: '0644'

    - name: Copy master.conf
      copy:
        src: master.conf
        dest: "{{ docker_compose_path }}/master.conf"

    - name: Copy replica.conf
      copy:
        src: replica.conf
        dest: "{{ docker_compose_path }}/replica.conf"

    - name: Bring up containers
      community.docker.docker_compose_v2:
        project_src: "{{ docker_compose_path }}"
        state: present

    - name: Wait for master to be ready
      community.docker.docker_container_exec:
        container: mysql_master
        command: "mysqladmin ping -u root -p{{ wordpress_db_root_password }}"
      register: result
      retries: 10
      delay: 5
      until: result.rc == 0
      changed_when: false

    - name: Get IP addresses of mysql containers
      community.docker.docker_container_info:
        name: "{{ item }}"
      loop:
        - mysql_master
        - mysql_replica
      register: container_infos

    - name: Set facts for master and replica IPs
      set_fact:
        mysql_master_ip: "{{ (container_infos.results | selectattr('item', 'equalto', 'mysql_master') | first).containers.NetworkSettings.Networks.bridge.IPAddress }}"
        mysql_replica_ip: "{{ (container_infos.results | selectattr('item', 'equalto', 'mysql_replica') | first).containers.NetworkSettings.Networks.bridge.IPAddress }}"

    - name: Create replication user on master
      community.mysql.mysql_user:
        name: "{{ repl_user }}"
        password: "{{ repl_password }}"
        host: "%"
        priv: "*.*:REPLICATION SLAVE"
        login_user: root
        login_password: "{{ wordpress_db_root_password }}"
        login_host: "{{ mysql_master_ip }}"
        state: present

    - name: Get master binlog status
      community.mysql.mysql_query:
        login_user: root
        login_password: "{{ wordpress_db_root_password }}"
        login_host: "{{ mysql_master_ip }}"
        query: "SHOW MASTER STATUS;"
      register: master_status

    - name: Set master log file and position
      set_fact:
        master_log_file: "{{ master_status.query_result[0].File }}"
        master_log_pos: "{{ master_status.query_result[0].Position }}"

    - name: Stop replication on replica (if running)
      community.mysql.mysql_replication:
        mode: stopslave
        login_user: root
        login_password: "{{ wordpress_db_root_password }}"
        login_host: "{{ mysql_replica_ip }}"
      ignore_errors: true

    - name: Reset replica state
      community.mysql.mysql_replication:
        mode: resetslaveall
        login_user: root
        login_password: "{{ wordpress_db_root_password }}"
        login_host: "{{ mysql_replica_ip }}"

    - name: Configure replication on replica
      community.mysql.mysql_replication:
        mode: changemaster
        master_host: "{{ mysql_master_ip }}"
        master_user: "{{ repl_user }}"
        master_password: "{{ repl_password }}"
        master_log_file: "{{ master_log_file }}"
        master_log_pos: "{{ master_log_pos | int }}"
        login_user: root
        login_password: "{{ wordpress_db_root_password }}"
        login_host: "{{ mysql_replica_ip }}"

    - name: Start replication
      community.mysql.mysql_replication:
        mode: startslave
        login_user: root
        login_password: "{{ wordpress_db_root_password }}"
        login_host: "{{ mysql_replica_ip }}"

    - name: Check replication status
      community.mysql.mysql_query:
        login_user: root
        login_password: "{{ wordpress_db_root_password }}"
        login_host: "{{ mysql_replica_ip }}"
        query: "SHOW REPLICA STATUS;"
      register: slave_status

    - name: Print slave IO and SQL running status
      debug:
        msg:
          - "Slave_IO_Running: {{ slave_status.query_result[0].Slave_IO_Running }}"
          - "Slave_SQL_Running: {{ slave_status.query_result[0].Slave_SQL_Running }}"

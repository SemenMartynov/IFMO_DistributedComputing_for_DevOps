- name: Deploy WordPress
  hosts: all
  become: true
  vars:
    docker_compose_path: "/opt/wordpress"
    wordpress_db_name: "wordpress"
    wordpress_db_user: "wp_user"
    wordpress_db_password: "wp_password"
    wordpress_db_root_password: "rootpassword"
    repl_user: "repl"
    repl_password: "replpass"
  tasks:
    - name: Install required packages
      ansible.builtin.apt:
        name:
          - docker.io
          - docker-compose
          - ufw
        state: present
        update_cache: true

    - name: Enable and start Docker service
      ansible.builtin.systemd:
        name: docker
        enabled: true
        state: started

    - name: Create Docker Compose directory
      ansible.builtin.file:
        path: "{{ docker_compose_path }}"
        state: directory
        mode: '0755'

    - name: Copy Docker Compose file
      ansible.builtin.copy:
        src: docker-compose.yml
        dest: "{{ docker_compose_path }}/docker-compose.yml"
        mode: '0644'

    - name: Copy Nginx Config File
      ansible.builtin.copy:
        src: nginx.conf
        dest: "{{ docker_compose_path }}/nginx.conf"
        mode: '0644'

    - name: Copy master.conf
      ansible.builtin.copy:
        src: master.conf
        dest: "{{ docker_compose_path }}/master.conf"
        mode: '0644'

    - name: Copy replica.conf
      ansible.builtin.copy:
        src: replica.conf
        dest: "{{ docker_compose_path }}/replica.conf"
        mode: '0644'

    - name: Dump existing WordPress database
      ansible.builtin.command: >
        docker exec wordpress_db sh -c "exec mysqldump -u root -p{{ wordpress_db_root_password }} {{ wordpress_db_name }}"
      register: dump_result
      changed_when: false
      failed_when: dump_result.rc != 0

    - name: Save dump to file
      ansible.builtin.copy:
        content: "{{ dump_result.stdout }}"
        dest: "{{ docker_compose_path }}/wordpress.sql"
        mode: '0644'

    - name: Stop and remove existing containers (if any)
      ansible.builtin.command: docker-compose down
      args:
        chdir: "{{ docker_compose_path }}"
      register: docker_down_result
      failed_when: docker_down_result.rc != 0 and docker_down_result.rc != 1
      changed_when: "'Stopped' in docker_down_result.stdout or 'Removing' in docker_down_result.stdout"

    - name: Start Docker Compose
      ansible.builtin.command: docker-compose up -d
      args:
        chdir: "{{ docker_compose_path }}"
      register: compose_up
      changed_when: "'Creating' in compose_up.stdout or 'Starting' in compose_up.stdout"

    - name: Wait for master to be ready
      ansible.builtin.command: docker exec mysql_master mysqladmin ping -u root -p{{ wordpress_db_root_password }}
      register: result
      retries: 10
      delay: 5
      until: result.rc == 0
      changed_when: false

    - name: Copy dump file into mysql_master container
      ansible.builtin.command: docker cp "{{ docker_compose_path }}/wordpress.sql" mysql_master:/wordpress.sql
      changed_when: true

    - name: Import dump into mysql_master
      ansible.builtin.command: >
        docker exec mysql_master sh -c "mysql -u root -p{{ wordpress_db_root_password }} {{ wordpress_db_name }} < /wordpress.sql"
      changed_when: true

    - name: Create replication user on master
      ansible.builtin.command: >
        docker exec mysql_master mysql -u root -p{{ wordpress_db_root_password }} -e "\
        CREATE USER IF NOT EXISTS '{{ repl_user }}'@'%' IDENTIFIED BY '{{ repl_password }}'; \
        GRANT REPLICATION SLAVE ON *.* TO '{{ repl_user }}'@'%'; \
        FLUSH PRIVILEGES;"
      changed_when: true

    - name: Get master status
      ansible.builtin.command: >
        docker exec mysql_master mysql -u root -p{{ wordpress_db_root_password }} -e "SHOW MASTER STATUS\\G"
      register: master_status_output
      changed_when: false

    - name: Parse master status
      ansible.builtin.set_fact:
        master_log_file: "{{ master_status_output.stdout | regex_search('File: (.*)', '\\1') }}"
        master_log_pos: "{{ master_status_output.stdout | regex_search('Position: (\\d+)', '\\1') | int }}"

    - name: Wait for replica to be ready
      ansible.builtin.command: docker exec mysql_replica mysqladmin ping -u root -p{{ wordpress_db_root_password }}
      register: result
      retries: 10
      delay: 5
      until: result.rc == 0
      changed_when: false

    - name: Configure replication on replica
      ansible.builtin.command: >
        docker exec mysql_replica mysql -u root -p{{ wordpress_db_root_password }} -e "\
        STOP SLAVE; \
        CHANGE MASTER TO \
          MASTER_HOST='mysql_master', \
          MASTER_USER='{{ repl_user }}', \
          MASTER_PASSWORD='{{ repl_password }}', \
          MASTER_LOG_FILE='{{ master_log_file }}', \
          MASTER_LOG_POS={{ master_log_pos }}, \
          GET_MASTER_PUBLIC_KEY = 1; \
        START SLAVE;"
      changed_when: true

    - name: Check slave status
      ansible.builtin.command: docker exec mysql_replica mysql -u root -p{{ wordpress_db_root_password }} -e "SHOW SLAVE STATUS\\G"
      register: slave_status_output
      changed_when: false

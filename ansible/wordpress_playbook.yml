- name: Deploy WordPress
  hosts: all
  become: true
  vars:
    docker_compose_path: "/opt/wordpress"
    wordpress_db_name: "wordpress"
    wordpress_db_user: "wp_user"
    wordpress_db_password: "wp_password"
    wordpress_db_root_password: "rootpassword"
    repl_user: "repl"
    repl_password: "replpass"
  tasks:
    - name: Add Docker GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker APT repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install required packages
      apt:
        name:
          - docker.io
          - docker-compose-plugin
        state: present
        update_cache: true

    - name: Enable and start Docker service
      systemd:
        name: docker
        enabled: true
        state: started

    - name: Create Docker Compose directory
      file:
        path: "{{ docker_compose_path }}"
        state: directory
        mode: '0755'

    - name: Copy Docker Compose file
      copy:
        src: docker-compose.yml
        dest: "{{ docker_compose_path }}/docker-compose.yml"
        mode: '0644'

    - name: Copy Nginx Config File
      copy:
        src: nginx.conf
        dest: "{{ docker_compose_path }}/nginx.conf"
        mode: '0644'

    - name: Copy master.conf
      copy:
        src: master.conf
        dest: "{{ docker_compose_path }}/master.conf"

    - name: Copy replica.conf
      copy:
        src: replica.conf
        dest: "{{ docker_compose_path }}/replica.conf"

    - name: Bring down containers (if running)
      community.docker.docker_compose_v2:
        project_src: "{{ docker_compose_path }}"
        state: absent

    - name: Bring up containers
      community.docker.docker_compose_v2:
        project_src: "{{ docker_compose_path }}"
        state: present

    - name: Wait for master to be ready
      community.docker.docker_container_exec:
        container: mysql_master
        command: mysqladmin ping -u root -p{{ wordpress_db_root_password }}
      register: result
      retries: 10
      delay: 5
      until: result.rc == 0
      changed_when: false

    - name: Dump existing WordPress database from master
      community.docker.docker_container_exec:
        container: mysql_master
        command: >-
          sh -c 'exec mysqldump -u root -p{{ wordpress_db_root_password }} {{ wordpress_db_name }}'
      register: dump_result
      changed_when: false
      failed_when: dump_result.rc != 0

    - name: Save dump to file
      copy:
        content: "{{ dump_result.stdout }}"
        dest: "{{ docker_compose_path }}/wordpress.sql"
        mode: '0644'

    - name: Copy dump file into mysql_master container
      command: >
        docker cp {{ docker_compose_path }}/wordpress.sql mysql_master:/wordpress.sql
      changed_when: true

    - name: Import dump into mysql_master
      community.docker.docker_container_exec:
        container: mysql_master
        command: >-
          sh -c "mysql -u root -p{{ wordpress_db_root_password }} {{ wordpress_db_name }} < /wordpress.sql"
      changed_when: true

    - name: Create replication user on master
      community.mysql.mysql_user:
        login_user: root
        login_password: "{{ wordpress_db_root_password }}"
        name: "{{ repl_user }}"
        host: "%"
        password: "{{ repl_password }}"
        priv: '*.*:REPLICATION SLAVE'
        state: present
      delegate_to: localhost

    - name: Get master status
      community.docker.docker_container_exec:
        container: mysql_master
        command: >-
          mysql -u root -p{{ wordpress_db_root_password }} -e "SHOW MASTER STATUS\G"
      register: master_status_output
      changed_when: false

    - name: Parse master log file
      set_fact:
        master_log_file: "{{ master_status_output.stdout | regex_search('File: (.*)', '\\1') }}"

    - name: Parse master log position
      set_fact:
        master_log_pos: "{{ master_status_output.stdout | regex_search('Position: (\\d+)', '\\1') | int }}"

    - name: Wait for replica to be ready
      community.docker.docker_container_exec:
        container: mysql_replica
        command: mysqladmin ping -u root -p{{ wordpress_db_root_password }}
      register: result
      retries: 10
      delay: 5
      until: result.rc == 0
      changed_when: false

    - name: Configure replication on replica
      community.docker.docker_container_exec:
        container: mysql_replica
        command: >-
          mysql -u root -p{{ wordpress_db_root_password }} -e "
          STOP SLAVE;
          CHANGE MASTER TO
            MASTER_HOST='mysql_master',
            MASTER_USER='{{ repl_user }}',
            MASTER_PASSWORD='{{ repl_password }}',
            MASTER_LOG_FILE='{{ master_log_file }}',
            MASTER_LOG_POS={{ master_log_pos }},
            GET_MASTER_PUBLIC_KEY = 1;
          START SLAVE;"
      changed_when: true

    - name: Check slave status
      community.docker.docker_container_exec:
        container: mysql_replica
        command: >-
          mysql -u root -p{{ wordpress_db_root_password }} -e "SHOW SLAVE STATUS\G"
      register: slave_status_output
      changed_when: false

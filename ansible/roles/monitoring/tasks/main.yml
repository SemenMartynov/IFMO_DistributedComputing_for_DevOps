- name: Создать каталог для мониторинга
  file:
    path: "{{ monitoring_dir }}"
    state: directory
    mode: '0755'
  become: true

- name: Создать каталоги для конфигурации Grafana
  file:
    path: "{{ monitoring_dir }}/grafana/{{ item }}"
    state: directory
    mode: '0755'
  with_items:
    - "provisioning/dashboards"
    - "provisioning/datasources"
    - "dashboards"
  become: true

- name: Скопировать конфигурацию Prometheus
  template:
    src: prometheus.yml.j2
    dest: "{{ monitoring_dir }}/prometheus.yml"
    mode: '0644'
  become: true

- name: Скопировать настройку источника данных Grafana для Prometheus
  template:
    src: grafana/provisioning/datasources/prometheus.yml.j2
    dest: "{{ monitoring_dir }}/grafana/provisioning/datasources/prometheus.yml"
    mode: '0644'
  become: true

- name: Скопировать настройку дашбордов Grafana
  template:
    src: grafana/provisioning/dashboards/dashboards.yml.j2
    dest: "{{ monitoring_dir }}/grafana/provisioning/dashboards/dashboards.yml"
    mode: '0644'
  become: true

- name: Скопировать дашборды Grafana
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: '0644'
  with_items:
    - { src: "templates/grafana/dashboards/system_metrics.json", dest: "{{ monitoring_dir }}/grafana/dashboards/system_metrics.json" }
  become: true

- name: Скопировать файл Docker Compose
  template:
    src: docker-compose.yml.j2
    dest: "{{ monitoring_dir }}/docker-compose.yml"
    mode: '0644'
  become: true
  register: compose_template

- name: Установить Python MySQL библиотеку
  apt:
    name: python3-pymysql
    state: present
  become: true

- name: Создать пользователя MySQL для мониторинга
  community.mysql.mysql_user:
    login_host: "127.0.0.1"
    login_port: 3306
    login_user: root
    login_password: "{{ wordpress_mysql_root_password }}"
    name: "{{ monitoring_mysql_user }}"
    password: "{{ monitoring_mysql_password }}"
    priv: '*.*:SELECT,PROCESS,REPLICATION CLIENT'
    state: present
  become: true

- name: Установить UFW
  apt:
    name: ufw
    state: present
  become: true

- name: Разрешить входящий трафик на порт Prometheus
  ufw:
    rule: allow
    port: "{{ monitoring_prometheus_port }}"
    proto: tcp
  become: true

- name: Разрешить входящий трафик на порт Grafana
  ufw:
    rule: allow
    port: "{{ monitoring_grafana_port }}"
    proto: tcp
  become: true

- name: Разрешить входящий трафик на порт cAdvisor
  ufw:
    rule: allow
    port: "{{ monitoring_cadvisor_port }}"
    proto: tcp
  become: true

- name: Включить UFW
  ufw:
    state: enabled
    policy: allow
  become: true

- name: Проверить существование сети WordPress
  community.docker.docker_network_info:
    name: wordpress_wp_network
  register: wp_network_info
  become: true
  ignore_errors: true

- name: Создать сеть WordPress, если она не существует
  community.docker.docker_network:
    name: wordpress_wp_network
    state: present
  when: wp_network_info.failed | default(true)
  become: true

- name: Запустить стек мониторинга
  community.docker.docker_compose_v2:
    project_src: "{{ monitoring_dir }}"
    state: present
  become: true
  register: compose_result
  async: 600
  poll: 0

- name: Подождать 10 секунд, чтобы контейнеры начали запускаться
  ansible.builtin.pause:
    seconds: 10
  become: true

- name: Проверить статус запуска стека мониторинга
  async_status:
    jid: "{{ compose_result.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 60
  delay: 10
  become: true

- name: Проверить статус контейнеров
  community.docker.docker_container_info:
    name: "{{ item }}"
  register: container_info
  loop:
    - prometheus
    - grafana
    - cadvisor
    - node-exporter
    - mysql-exporter
  become: true

- name: Вывести статус контейнеров
  ansible.builtin.debug:
    var: container_info.results
  become: true

- name: Проверить логи контейнера Prometheus
  ansible.builtin.command:
    cmd: "docker logs prometheus --tail 20"
  register: prometheus_logs
  become: true
  ignore_errors: yes

- name: Вывести логи Prometheus
  ansible.builtin.debug:
    var: prometheus_logs.stdout
  become: true
  when: prometheus_logs is defined

- name: Проверить логи контейнера Grafana
  ansible.builtin.command:
    cmd: "docker logs grafana --tail 20"
  register: grafana_logs
  become: true
  ignore_errors: yes

- name: Вывести логи Grafana
  ansible.builtin.debug:
    var: grafana_logs.stdout
  become: true
  when: grafana_logs is defined

- name: Проверить сетевые привязки
  community.general.listen_ports_facts:
  become: true

- name: Вывести сетевые привязки для Prometheus
  ansible.builtin.debug:
    msg: "Prometheus порт {{ monitoring_prometheus_port }} прослушивается: {{ monitoring_prometheus_port in ansible_facts.tcp_listen | map(attribute='port') | list }}"
  become: true

- name: Вывести сетевые привязки для Grafana
  ansible.builtin.debug:
    msg: "Grafana порт {{ monitoring_grafana_port }} прослушивается: {{ monitoring_grafana_port in ansible_facts.tcp_listen | map(attribute='port') | list }}"
  become: true

- name: Вывести сетевые привязки для cAdvisor
  ansible.builtin.debug:
    msg: "cAdvisor порт {{ monitoring_cadvisor_port }} прослушивается: {{ monitoring_cadvisor_port in ansible_facts.tcp_listen | map(attribute='port') | list }}"
  become: true

- name: Проверить Docker сети
  ansible.builtin.command:
    cmd: "docker network ls --format '{% raw %}{{.Name}}{% endraw %}'"
  register: docker_networks
  become: true

- name: Вывести Docker сети
  ansible.builtin.debug:
    var: docker_networks.stdout_lines
  become: true

- name: Проверить подключения контейнера Prometheus к сетям
  ansible.builtin.command:
    cmd: "docker network inspect monitoring_monitoring_network"
  register: prometheus_network
  become: true
  ignore_errors: yes

- name: Вывести подключения контейнера Prometheus к сетям
  ansible.builtin.debug:
    var: prometheus_network.stdout | default('Network not found')
  become: true
  when: prometheus_network is defined and prometheus_network.rc is defined and prometheus_network.rc == 0

- name: Проверить подключения к сети WordPress
  ansible.builtin.command:
    cmd: "docker network inspect wordpress_wp_network"
  register: wp_network
  become: true
  ignore_errors: yes

- name: Вывести подключения к сети WordPress
  ansible.builtin.debug:
    var: wp_network.stdout | default('Network not found')
  become: true
  when: wp_network is defined and wp_network.rc is defined and wp_network.rc == 0

- name: Собрать информацию о контейнерах
  ansible.builtin.command:
    cmd: "docker inspect {{ item }}"
  register: container_stats
  loop:
    - prometheus
    - grafana
    - cadvisor
    - node-exporter
    - mysql-exporter
  become: true
  ignore_errors: yes

- name: Вывести информацию о контейнерах
  ansible.builtin.debug:
    var: item.stdout | default('Container not found')
  loop: "{{ container_stats.results }}"
  when: item.rc is defined and item.rc == 0
  become: true

- name: Собрать факты о системе
  ansible.builtin.setup:
    gather_subset:
      - hardware
  become: true

- name: Вывести информацию о памяти
  ansible.builtin.debug:
    msg: "Свободная память: {{ ansible_facts.memfree_mb }} MB, Всего памяти: {{ ansible_facts.memtotal_mb }} MB"
  become: true

- name: Вывести информацию о CPU
  ansible.builtin.debug:
    msg: "Процессоры: {{ ansible_facts.processor_count }}, Модель: {{ ansible_facts.processor[0] }}"
  become: true

- name: Проверить конфигурацию Prometheus
  ansible.builtin.slurp:
    src: "{{ monitoring_dir }}/prometheus.yml"
  register: prometheus_config_b64
  become: true

- name: Вывести конфигурацию Prometheus
  ansible.builtin.debug:
    msg: "{{ prometheus_config_b64['content'] | b64decode | split('\n') }}"
  become: true

- name: Проверить конфигурацию Grafana datasources
  ansible.builtin.slurp:
    src: "{{ monitoring_dir }}/grafana/provisioning/datasources/prometheus.yml"
  register: grafana_datasources_b64
  become: true
  ignore_errors: yes

- name: Вывести конфигурацию Grafana datasources
  ansible.builtin.debug:
    msg: "{{ grafana_datasources_b64['content'] | b64decode | split('\n') }}"
  become: true
  when: grafana_datasources_b64 is defined and grafana_datasources_b64.content is defined

- name: Проверить конфигурацию Docker Compose
  ansible.builtin.slurp:
    src: "{{ monitoring_dir }}/docker-compose.yml"
  register: docker_compose_config_b64
  become: true

- name: Вывести конфигурацию Docker Compose
  ansible.builtin.debug:
    msg: "{{ docker_compose_config_b64['content'] | b64decode | split('\n') }}"
  become: true

- name: Остановить и удалить существующие контейнеры мониторинга
  community.docker.docker_compose_v2:
    project_src: "{{ monitoring_dir }}"
    state: absent
    remove_volumes: false
  become: true
  ignore_errors: yes

- name: Запустить стек мониторинга с обновленной конфигурацией
  community.docker.docker_compose_v2:
    project_src: "{{ monitoring_dir }}"
    state: present
    recreate: always
    pull: always
  become: true
  register: restart_result
  async: 600
  poll: 0

- name: Подождать 10 секунд, чтобы контейнеры начали запускаться после перезапуска
  ansible.builtin.pause:
    seconds: 10
  become: true

- name: Проверить статус перезапуска стека мониторинга
  async_status:
    jid: "{{ restart_result.ansible_job_id }}"
  register: restart_job_result
  until: restart_job_result.finished
  retries: 60
  delay: 10
  become: true

- name: Вывести результат перезапуска
  ansible.builtin.debug:
    var: restart_job_result
  become: true

- name: Подождать 30 секунд, чтобы контейнеры полностью запустились
  ansible.builtin.pause:
    seconds: 30
  become: true

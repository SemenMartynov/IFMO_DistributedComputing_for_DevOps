# ---
# - name: Запуск контейнера mysql
#   community.docker.docker_container:
#     name: "{{ mysql_container_name }}"
#     image: "{{ mysql_image }}"
#     env:
#       MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
#       MYSQL_DATABASE: "{{ mysql_database }}"
#       MYSQL_USER: "{{ mysql_user }}"
#       MYSQL_PASSWORD: "{{ mysql_password }}"
#     networks:
#       - name: "{{ docker_network }}"
#     state: started
#     volumes:
#       - /opt/mysql/data:/var/lib/mysql
#       - /tmp/mysql_dumps:/tmp/mysql_dumps

- name: Установка зависимостей MySQL и килентов
  ansible.builtin.package:
    name:
      - python3-pymysql
      - python3-mysqldb
      - default-mysql-client
    state: present

- name: Проверка запущенного контейнера
  community.docker.docker_container_info:
    name: "{{ mysql_container_name }}"
  register: mysql_container_info

- name: Проверка существования дампа базы данных
  ansible.builtin.stat:
    path: /tmp/mysql_dumps/{{ mysql_database }}_dump.sql
  register: dump_file

- name: Создание дампа базы данных, если он не существует
  community.mysql.mysql_db:
    login_user: root
    login_host: 127.0.0.1
    login_password: "{{ mysql_root_password }}"
    name: "{{ mysql_database }}"
    target: "/tmp/mysql_dumps/{{ mysql_database }}_dump.sql"
    state: dump
  when: not dump_file.stat.exists and mysql_container_info.exists
  register: dump_created
  retries: 10
  delay: 5

- name: Скачивание дампа на локальную машину
  ansible.builtin.fetch:
    src: "/tmp/mysql_dumps/{{ mysql_database }}_dump.sql"
    dest: "/tmp/mysql_dumps/"
    flat: true
  when: not dump_file.stat.exists

- name: Установка прав на локальный дамп
  ansible.builtin.file:
    path: "/tmp/mysql_dumps/{{ mysql_database }}_dump.sql"
    mode: "0644"
  delegate_to: localhost
  become: false
  when: not dump_file.stat.exists

- name: Остановка контейнера, если он запущен
  community.docker.docker_container:
    name: "{{ mysql_container_name }}"
    state: stopped
  when: mysql_container_info.exists


    # Ensure backup directories exist
    - name: Ensure backup directories exist
      file:
        path: "{{ item.path }}/backup"
        state: directory
        mode: '0777'
      loop:
        - { path: "{{ vol_db_data }}" }
        - { path: "{{ vol_db_data_slave }}" }

    # --- Master Configuration ---
    - name: Setup MariaDB Master
      block:
        - name: Ensure mariadb.cnf exists for master
          stat:
            path: "{{ vol_db_conf }}/mariadb.cnf"
          register: mycnf_master_status
          become: true

        - name: Fail if mariadb.cnf does not exist for master
          fail:
            msg: "{{ vol_db_conf }}/mariadb.cnf does not exist"
          when: not mycnf_master_status.stat.exists
          become: true

        - name: Backup master configuration file
          copy:
            remote_src: true
            src: "{{ vol_db_conf }}/mariadb.cnf"
            dest: "{{ vol_db_conf }}/mariadb.cnf.backup"
          become: true

        - name: Create replication user on master
          community.mysql.mysql_user:
            login_user: root
            login_password: "{{ db_root_password }}"
            name: "{{ replication_user }}"
            host: "%"
            password: "{{ replication_password }}"
            priv: "*.*:REPLICATION SLAVE"
            state: present

        - name: Ensure [mysqld] section is present for master
          lineinfile:
            path: "{{ vol_db_conf }}/mariadb.cnf"
            regexp: "^\\[mysqld\\]"
            line: "[mysqld]"
            insertbefore: "^# Import all .cnf files from configuration directory"
          become: true

        - name: Add replication parameters for master
          lineinfile:
            path: "{{ vol_db_conf }}/mariadb.cnf"
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            insertafter: "[mysqld]"
          with_items:
            - { regexp: '^server-id=', line: 'server-id=1' }
            - { regexp: '^log-bin=', line: 'log-bin=/var/lib/mysql/mysql-bin.log' }
            - { regexp: '^binlog-ignore-db=', line: 'binlog-ignore-db=information_schema' }
            - { regexp: '^binlog-format=', line: 'binlog-format=ROW' }
            - { regexp: '^bind-address=', line: 'bind-address=0.0.0.0' }
          register: replication_parameters
          become: true

        - name: Restart MariaDB Master container only if configuration changed
          community.docker.docker_container:
            name: db
            state: started
            restart: true
          when: replication_parameters.changed

      rescue:
        - name: Log error during MariaDB master configuration
          debug:
            msg: "MariaDB configuration failed, restoring original config."

        - name: Restore original MariaDB my.cnf from backup
          copy:
            remote_src: true
            src: "{{ vol_db_conf }}/mariadb.cnf.backup"
            dest: "{{ vol_db_conf }}/mariadb.cnf"
          become: true

        - name: Restart MariaDB with original configuration
          community.docker.docker_container:
            name: db
            state: started
            restart: true

        - name: Log successful restoration
          debug:
            msg: "MariaDB configuration inside the Docker container was restored from backup."

    # --- Replica Configuration ---
    - name: Setup MariaDB Replica
      block:

        - name: Ensure mariadb.cnf exists for replica
          stat:
            path: "{{ vol_db_conf_slave }}/mariadb.cnf"
          register: mycnf_slave_status
          become: true

        - name: Fail if mariadb.cnf does not exist for replica
          fail:
            msg: "{{ vol_db_conf_slave }}/mariadb.cnf does not exist"
          when: not mycnf_slave_status.stat.exists
          become: true

        - name: Backup slave configuration file
          copy:
            remote_src: true
            src: "{{ vol_db_conf_slave }}/mariadb.cnf"
            dest: "{{ vol_db_conf_slave }}/mariadb.cnf.backup"
          become: true

        - name: Ensure [mysqld] section is present for replica
          lineinfile:
            path: "{{ vol_db_conf_slave }}/mariadb.cnf"
            regexp: "^\\[mysqld\\]"
            line: "[mysqld]"
            insertbefore: "^# Import all .cnf files from configuration directory"
          become: true

        - name: Add replication parameters for replica
          lineinfile:
            path: "{{ vol_db_conf_slave }}/mariadb.cnf"
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            insertafter: "[mysqld]"
          with_items:
            - { regexp: '^server-id=', line: 'server-id=2' }
          register: replica_config_changes
          become: true

        - name: Get master status
          mysql_replication:
            login_port: 3306
            login_user: root
            login_password: "{{ db_root_password }}"
            mode: getprimary
          register: mysql_primary_status

        - name: Check replica status
          mysql_replication:
            login_port: 3307
            login_user: root
            login_password: "{{ db_root_password }}"
            mode: getreplica
          register: check_replica_status
          ignore_errors: yes

        - name: Configure replication on slave
          community.mysql.mysql_replication:
            login_port: 3307
            login_user: root
            login_password: "{{ db_root_password }}"
            mode: changeprimary
            primary_host: db
            primary_port: 3306
            primary_user: "{{ replication_user }}"
            primary_password: "{{ replication_password }}"
            primary_log_file: "{{ mysql_primary_status.File }}"
            primary_log_pos: "{{ mysql_primary_status.Position }}"
            primary_connect_retry: 5
          when:
            - check_replica_status is failed or
              check_replica_status.Is_Replica == false or
              check_replica_status.Slave_IO_Running != "Yes" or
              check_replica_status.Slave_SQL_Running != "Yes"

        - name: Start slave replication
          community.mysql.mysql_replication:
            login_user: root
            login_password: "{{ db_root_password }}"
            login_port: 3307
            mode: startreplica

        - name: Restart slave_db if configuration was modified
          community.docker.docker_container:
            name: db_slave
            state: started
            restart: true
          when: replica_config_changes.changed

        - name: Wait for slave_db to be ready
          community.docker.docker_container_exec:
            container: db_slave
            command: healthcheck.sh --connect --innodb_initialized
          register: mysql_ready
          retries: 10
          delay: 5
          until: mysql_ready.rc == 0

        - name: Get replica status
          mysql_replication:
            login_port: 3307
            login_user: root
            login_password: "{{ db_root_password }}"
            mode: getreplica
          register: replica_status
          retries: 5
          delay: 10
          until:
            - replica_status.Slave_IO_Running == "Yes"
            - replica_status.Slave_SQL_Running == "Yes"
            - replica_status.Last_SQL_Error == ""
            - replica_status.Last_IO_Error == ""

      rescue:
        - name: Log failure
          debug:
            msg: "An error occurred during replication setup"

        - name: Stop slave on failure
          community.mysql.mysql_replication:
            mode: stopreplica
            login_port: 3307
            login_user: root
            login_password: "{{ db_root_password }}"
          ignore_errors: yes

        - name: Unlock master tables, if locked
          community.mysql.mysql_query:
            login_port: 3306
            login_user: root
            login_password: "{{ db_root_password }}"
            query: "UNLOCK TABLES;"
          ignore_errors: yes

        - name: Reset slave on failure
          community.mysql.mysql_replication:
            mode: resetreplicaall
            login_port: 3307
            login_user: root
            login_password: "{{ db_root_password }}"
          ignore_errors: yes

        - name: Restore original MariaDB my.cnf from backup
          copy:
            remote_src: true
            src: "{{ vol_db_conf_slave }}/mariadb.cnf.backup"
            dest: "{{ vol_db_conf_slave }}/mariadb.cnf"
          become: true

        - name: Restart MariaDB with original configuration
          community.docker.docker_container:
            name: db_slave
            state: started
            restart: true

    # --- Info ---
    - name: Display final replication status
      debug:
        msg: "{{ replica_status | default('Replication status not available') }}"
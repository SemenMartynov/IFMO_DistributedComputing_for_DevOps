- name: Copy init_master.sql
  ansible.builtin.template:
    src: init_master.sql.j2
    dest: /home/{{ ansible_user }}/init_master.sql
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"

- name: Copy docker-compose template
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: /home/{{ ansible_user }}/docker-compose.yml
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"

- name: Start WordPress and MySQL containers
  community.docker.docker_compose_v2:
    project_src: /home/{{ ansible_user }}
    state: present

# process the db-master container
- name: Check availability of db-master
  become: yes
  community.docker.docker_container_exec:
    container: db-master
    command: mysqladmin ping -uroot -p{{ mysql_root_password }} --silent
  register: result_master
  retries: 30
  delay: 3
  until: result_master.rc == 0

- name: Copy init-master.sql to db-master container
  community.docker.docker_container_copy_into:
    container: db-master
    path: /home/{{ ansible_user }}/init_master.sql
    container_path: init_master.sql

- name: Run init-master.sql inside db-master
  become: yes
  community.docker.docker_container_exec:
    container: db-master
    command: bash -c "mysql -uroot -p{{ mysql_root_password }} {{ wordpress_db_name }} < /init_master.sql"

# process the db-slave container
- name: Check availability of db-slave
  become: yes
  community.docker.docker_container_exec:
    container: db-slave
    command: mysqladmin ping -uroot -p{{ mysql_root_password }} --silent
  register: result_slave
  retries: 30
  delay: 3
  until: result_slave.rc == 0

- name: Get replica status
  become: yes
  community.docker.docker_container_exec:
    container: db-slave
    command: mysql -uroot -p{{ mysql_root_password }} -e "SHOW SLAVE STATUS\G"
  register: replica_status

- name: Check if replica is running
  set_fact:
    replica_io_running: "{{ 'Replica_IO_Running: Yes' in replica_status.stdout }}"
    replica_sql_running: "{{ 'Replica_SQL_Running: Yes' in replica_status.stdout }}"

- name: Configure slave replication
  community.docker.docker_container_exec:
    container: db-slave
    command: >
      mysql -uroot -p{{ mysql_root_password }} -e "
      CHANGE REPLICATION SOURCE TO
      SOURCE_HOST='db-master',
      SOURCE_USER='{{ replica_db_user }}',
      SOURCE_PASSWORD='{{ replica_db_password }}',
      SOURCE_AUTO_POSITION=1;
      START REPLICA;"
  when: not (replica_io_running or replica_sql_running)

# Dump
- name: Dump DB from master (only if not yet dumped)
  ansible.builtin.shell: |
    docker exec db-master mysqldump -u{{ master_db_user }} -p{{ master_db_password }} {{ wordpress_db_name }} > /tmp/db_dump.sql
  args:
    creates: /tmp/db_dump.sql
  register: dump_result

- name: Copy dump to db-slave
  become: yes
  community.docker.docker_container_copy_into:
    container: db-slave
    path: /tmp/db_dump.sql
    container_path: /tmp/db_dump.sql

- name: Restore DB on slave
  become: yes
  community.docker.docker_container_exec:
    container: db-slave
    command: bash -c "mysql -uroot -p{{ mysql_root_password }} {{ wordpress_db_name }} < /tmp/db_dump.sql"

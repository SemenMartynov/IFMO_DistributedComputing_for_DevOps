#запуск с запросом на рута 
#ansible-playbook -i inventory.ini ans.yml --ask-become-pass


#установка ansible на ubuntu

#sudo apt install ansible-core
#Разварачивать буду mysql прописываем хосты, и переменные для бд и общее название сети для докера.

# https://habr.com/ru/articles/532216/
#https://docs.ansible.com/ansible/latest/collections/community/mysql/mysql_variables_module.html#ansible-collections-community-mysql-mysql-variables-module
#https://dev.mysql.com/doc/refman/8.4/en/replication-gtids-howto.html
---
- name: Развертывание WordPress с Docker
  hosts: all
  become: yes
  vars:
    mysql_root_password: "my_root_password"
    mysql_database: "wordpress_db"
    mysql_user: "wp_user"
    mysql_password: "wp_password"
    docker_network: "wp_network"
    cluster_network: "ms_network"
    replica_user: "replica_user"
    replica_password: "password"
#    playbook_dir: "./"



  tasks:
   - name: Clone a repo with separate git directory
     ansible.builtin.git:
      repo: "https://github.com/pashkami/Tazetdinov-Pavel_IFMO_DistributedComputing_for_DevOps"
      dest: "{{ playbook_dir }}/project"
      single_branch: yes
      version: "add-cluster"
      force: yes

   - name: Обновить apt-кеш, установка Docker и Python и модуля Docker
     apt:
       name:
         - docker.io
         - python3-pip
         - python3-docker
         - docker-compose
       state: present
       update_cache: yes

   - name: запускаю сервис Docker
     service:
       name: docker
       state: started
       enabled: true

   - name: Создаю Docker-сеть для WP и БД
     docker_network:
       name: "{{ docker_network }}"
       state: present

   - name: Создаю Docker-сеть для кластера (мастер-слейв)#Создаю сеть для связи мастера и слейва
     docker_network:
       name: "{{ cluster_network }}"
       state: present

   - name: Создать Docker-том для мастера
     community.docker.docker_volume:
       name: mysql_master_data

   - name: Создать Docker-том для реплики
     community.docker.docker_volume:
       name: mysql_slave_data

   - name: Создать Docker-том для wp
     community.docker.docker_volume:
       name: wp_data

   - name: Сгенерировать SQL-файл для инициализации мастера
     template:
       src: "{{ playbook_dir }}/project/templates/user_init_master.sql.j2"
       dest: "{{ playbook_dir }}/project/sql_confs/user_init_master.sql"
       mode: '0644'

   - name: Сгенерировать SQL-файл для инициализации реплики
     template:
       src: "{{ playbook_dir }}/project/templates/user_init_slave.sql.j2"
       dest: "{{ playbook_dir }}/project/sql_confs/user_init_slave.sql"
       mode: '0644'


   - name: запускаю контейнер базы данных MySQL -master
     docker_container:
       name: wp_db_master
       image: mysql:5.7
       state: started
       restart_policy: always
       env:
         MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
         MYSQL_DATABASE: "{{ mysql_database }}"
         MYSQL_USER: "{{ mysql_user }}"
         MYSQL_PASSWORD: "{{ mysql_password }}"
#         MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
       volumes:
         - mysql_master_data:/var/lib/mysql
         - "{{ playbook_dir }}/project/sql_confs/master.cnf:/etc/mysql/conf.d/master.cnf:ro"
         - "{{ playbook_dir }}/project/sql_confs/user_init_master.sql:/docker-entrypoint-initdb.d/user_init_master.sql:rw" #Создание пользователя для реплики 
       networks:
         - name: "{{ docker_network }}"
         - name: "{{ cluster_network }}"
       published_ports:
          - "3307:3306"

  #  - name: Получить статус мастера
  #    command: >
  #       docker exec wp_db_master
  #       mysql -h127.0.0.1 -P3306 -uroot -p{{ mysql_root_password }}
  #       -e "SHOW MASTER STATUS\G"
  #    register: master_status
  #    changed_when: false


  #  - name: Вытащить лог-файл мастера
  #    set_fact:
  #       master_log_file: "{{ master_status.stdout | regex_search('File: (.*)', '\\1') }}"

  #  - name: Вытащить позицию лога
  #    set_fact:
  #      master_log_pos: "{{ master_status.stdout | regex_search('Position: (\\d+)', '\\1') | int }}"
  #    ansible.builtin.debug:
  #      msg: "позиция лога: {{ master_log_pos }}"      


   - name: запускаю контейнер базы данных MySQL - slave
     docker_container:
       name: wp_db_slave
       image: mysql:5.7
       state: started
       restart_policy: always
       env:
         MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
         MYSQL_DATABASE: "{{ mysql_database }}"

       volumes:
         - mysql_slave_data:/var/lib/mysql
         - "{{ playbook_dir }}/project/sql_confs/slave.cnf:/etc/mysql/conf.d/slave.cnf:ro"
         - "{{ playbook_dir }}/project/sql_confs/user_init_slave.sql:/docker-entrypoint-initdb.d/user_init_slave.sql:rw"
       networks:
         - name: "{{ cluster_network }}"
       published_ports:
          - "3308:3306"
   - name: Проверка готовности MySQL в wp_db_slave
     command: docker exec -e MYSQL_PWD={{ mysql_root_password }} wp_db_slave mysql -uroot -e "SELECT 1"
     register: mysql_ready
     retries: 10
     delay: 5
     until: mysql_ready.rc == 0

   - name: Проверяю статус реплики
     command: 'docker exec -e MYSQL_PWD={{ mysql_root_password }} wp_db_slave mysql -uroot -e "SHOW SLAVE STATUS\G"'
     register: replica_status
     changed_when: false
   - debug:
       msg: "{{ replica_status.stdout }}"


   - name: запускаю контейнер WordPress
     docker_container:
       name: wordpress
       image: wordpress:latest
       state: started
       restart_policy: always
       published_ports:
         - "80:80"
       env:
         WORDPRESS_DB_HOST: "wp_db_master:3306"
         WORDPRESS_DB_USER: "{{ mysql_user }}"
         WORDPRESS_DB_PASSWORD: "{{ mysql_password }}"
         WORDPRESS_DB_NAME: "{{ mysql_database }}"
        
       volumes:
          - wp_data:/var/www/html
       networks:
         - name: "{{ docker_network }}"

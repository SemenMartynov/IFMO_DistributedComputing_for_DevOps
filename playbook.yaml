---
- name: Update package repository lists
  hosts: all
  become: yes
  gather_facts: yes
  vars:
    packages_to_install:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin


  tasks:
    - name: Update apt repository lists (Debian/Ubuntu)
      ansible.builtin.apt:
        update_cache: yes
      when: ansible_facts['os_family'] == 'Debian'

    - name: Install required packages (ca-certificates and curl)
      apt:
        name:
          - ca-certificates
          - curl
        state: present
        update_cache: yes

    - name: Create directory for apt keyrings
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Docker's official GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'
        validate_certs: yes

    - name: Verify supported architectures
      ansible.builtin.shell:
        cmd: "curl -s https://download.docker.com/linux/ubuntu/dists/{{ ansible_distribution_release }}/Release | grep 'Architectures:'"
      register: docker_archs
      changed_when: false
      ignore_errors: yes

    - name: Set correct architecture (handle x86_64/amd64)
      ansible.builtin.set_fact:
        docker_arch: >-
          {% if ('amd64' in docker_archs.stdout) and (ansible_architecture == 'x86_64') %}amd64
          {% elif ansible_architecture in docker_archs.stdout %} {{ ansible_architecture }}
          {% else %}amd64{% endif %}

    - name: Create Docker repository file
      ansible.builtin.copy:
        dest: /etc/apt/sources.list.d/docker.list
        content: |
          deb [arch={{ docker_arch }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        owner: root
        group: root
        mode: '0644'
      when: ansible_distribution == 'Ubuntu'
    - name: Update apt repository lists (Debian/Ubuntu)
      ansible.builtin.apt:
        update_cache: yes
      when: ansible_facts['os_family'] == 'Debian'

    - name: Install packages
      apt:
        name: "{{ packages_to_install }}"
        state: present

    - name: Ensure Docker is running and enabled
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes

    - name: Pull Docker images
      community.docker.docker_image:
        name: "{{ item }}"
        tag: latest
        source: pull
      loop:
        - bitnami/mariadb-galera
        - wordpress

    - name: Create a Docker network for WordPress and MariaDB
      community.docker.docker_network:
        name: "{{ item }}"
        driver: bridge
      loop:
        - wp_network
        - db_network

    - name: Run MariaDB-Master Docker container
      community.docker.docker_container:
        name: mariadb-master
        image: bitnami/mariadb-galera:latest
        state: started
        healthcheck:
          test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
          interval: 1m30s
          timeout: 10s
          retries: 3
          start_period: 30s
        restart_policy: unless-stopped
        env:
          MARIADB_ROOT_PASSWORD: somewordpress
          MARIADB_DATABASE: wordpress
          MARIADB_USER: wordpress
          MARIADB_PASSWORD: wordpress
          ALLOW_EMPTY_PASSWORD: "yes"
          MARIADB_GALERA_CLUSTER_BOOTSTRAP: "yes"
          MARIADB_GALERA_FORCE_SAFETOBOOTSTRAP: "yes"
          MARIADB_GALERA_CLUSTER_NAME: galera_cluster
          MARIADB_GALERA_MARIABACKUP_USER: backup
          MARIADB_GALERA_MARIABACKUP_PASSWORD: backup
          MARIADB_REPLICATION_USER: replication
          MARIADB_REPLICATION_PASSWORD: replication
        volumes:
          - "mariadb_data:/var/lib/mysql"
        networks:
          - name: wp_network
          - name: db_network

    - name: Run MariaDB-Slave Docker container
      community.docker.docker_container:
        name: mariadb-slave
        image: bitnami/mariadb-galera:latest
        state: started
        healthcheck:
          test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
          interval: 1m30s
          timeout: 10s
          retries: 3
          start_period: 30s
        restart_policy: unless-stopped
        env:
          MARIADB_ROOT_PASSWORD: somewordpress
          MARIADB_DATABASE: wordpress
          MARIADB_USER: wordpress
          MARIADB_PASSWORD: wordpress
          ALLOW_EMPTY_PASSWORD: "yes"
          MARIADB_GALERA_CLUSTER_NAME: galera_cluster 
          MARIADB_GALERA_CLUSTER_ADDRESS: "gcomm://mariadb-master"
          MARIADB_GALERA_MARIABACKUP_USER: backup
          MARIADB_GALERA_MARIABACKUP_PASSWORD: backup
          MARIADB_REPLICATION_USER: replication
          MARIADB_REPLICATION_PASSWORD: replication
        volumes:
          - "mariadb_data:/var/lib/mysql"
        networks:
          - name: db_network

    - name: Run Wordpress Docker container
      community.docker.docker_container:
        name: wordpress
        image: wordpress:latest
        state: started
        restart_policy: unless-stopped
        env:
          WORDPRESS_DB_HOST: mariadb-master
          WORDPRESS_DB_USER: wordpress
          WORDPRESS_DB_PASSWORD: wordpress
          WORDPRESS_DB_NAME: wordpress
        ports:
          - "80:80"
        networks:
          - name: wp_network

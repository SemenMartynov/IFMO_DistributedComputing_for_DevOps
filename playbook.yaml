---
- name: WordPress и MySQL Master-Slave кластер (MySQL 8.0) с мониторингом Prometheus и Grafana
  hosts: all
  gather_facts: yes
  become: yes
  vars:
    mysql_root_password: "root1234"
    mysql_repl_user: "repl_user"
    mysql_repl_password: "repl_password"
    mysql_database: "wordpress_database"
    mysql_user: "wordpress_user"
    mysql_password: "wordpress_password"
    mysql_config_dir: "/opt/mysql_cluster"
    prometheus_config_dir: "/opt/prometheus"
    ansible_python_mysql_driver: pymysql
    exporter_user: "exporter"
    exporter_password: "exporter_password"

  tasks:
    - name: Установка необходимых пакетов
      apt:
        name:
          - docker.io
          - python3-pip
          - python3-docker
          - python3-pymysql
        state: present
        update_cache: yes

    - name: Запуск Docker
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Добавление пользователя в группу docker
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Создание директории для конфигов
      file:
        path: "{{ mysql_config_dir }}"
        state: directory
        mode: 0755

    - name: Создание конфига для Master
      template:
        src: my-master.cnf.j2
        dest: "{{ mysql_config_dir }}/my-master.cnf"
        mode: 0644

    - name: Создание конфига для Slave
      template:
        src: my-slave.cnf.j2
        dest: "{{ mysql_config_dir }}/my-slave.cnf"
        mode: 0644

    - name: Создание директории для конфигурации mysqld_exporter
      file:
        path: /opt/mysql_exporter
        state: directory
        mode: "0755"

    - name: Копирование файла .my.cnf для mysqld_exporter
      copy:
        dest: /opt/mysql_exporter/.my.cnf
        content: |
          [client]
          user=exporter
          password=exporter_password
          host=localhost
        owner: root
        group: root
        mode: "0644"

    - name: Создание сети для контейнеров
      community.docker.docker_network:
        name: wp_network
        driver: bridge

    - name: Запуск MySQL Master
      community.docker.docker_container:
        name: mysql_master
        image: mysql:8.0
        networks:
          - name: wp_network
        restart_policy: always
        env:
          MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
          MYSQL_DATABASE: "{{ mysql_database }}"
          MYSQL_USER: "{{ mysql_user }}"
          MYSQL_PASSWORD: "{{ mysql_password }}"
          MYSQL_REPLICATION_USER: "{{ mysql_repl_user }}"
          MYSQL_REPLICATION_PASSWORD: "{{ mysql_repl_password }}"
        volumes:
          - mysql_master_data:/var/lib/mysql
          - "{{ mysql_config_dir }}/my-master.cnf:/etc/mysql/conf.d/replication.cnf"
        ports:
          - "3306:3306"
        healthcheck:
          test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
          interval: 5s
          timeout: 3s
          retries: 5

    - name: Ожидание готовности Master
      wait_for:
        host: "{{ ansible_host }}"
        port: 3306
        timeout: 120
        delay: 10

    - name: Запуск MySQL Slave
      community.docker.docker_container:
        name: mysql_slave
        image: mysql:8.0
        networks:
          - name: wp_network
        restart_policy: always
        env:
          MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
        volumes:
          - mysql_slave_data:/var/lib/mysql
          - "{{ mysql_config_dir }}/my-slave.cnf:/etc/mysql/conf.d/replication.cnf"
        ports:
          - "3307:3306"
        healthcheck:
          test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
          interval: 5s
          timeout: 3s
          retries: 5

    - name: Ожидание готовности Slave
      wait_for:
        host: "{{ ansible_host }}"
        port: 3307
        timeout: 120
        delay: 10

    - name: Создаем пользователя репликации на Master
      community.mysql.mysql_user:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        login_host: "{{ ansible_host }}"
        login_port: 3306
        name: "{{ mysql_repl_user }}"
        password: "{{ mysql_repl_password }}"
        host: "%"
        priv: "*.*:REPLICATION SLAVE,REPLICATION CLIENT"
        state: present

    - name: Настройка репликации на Slave
      community.mysql.mysql_replication:
        mode: changereplication
        primary_host: "{{ ansible_host }}"
        primary_user: "{{ mysql_repl_user }}"
        primary_password: "{{ mysql_repl_password }}"
        primary_auto_position: 1
        login_user: root
        login_password: "{{ mysql_root_password }}"
        login_host: "{{ ansible_host }}"
        login_port: 3307
      register: replication_setup
      until: replication_setup is succeeded
      retries: 3
      delay: 5

    - name: Запуск репликации
      community.mysql.mysql_replication:
        mode: startreplica
        login_user: root
        login_password: "{{ mysql_root_password }}"
        login_host: "{{ ansible_host }}"
        login_port: 3307

    - name: Проверка статуса репликации
      community.mysql.mysql_replication:
        mode: getreplica
        login_user: root
        login_password: "{{ mysql_root_password }}"
        login_host: "{{ ansible_host }}"
        login_port: 3307
      register: replication_status
      until:
        - replication_status.Replica_IO_Running == "Yes"
        - replication_status.Replica_SQL_Running == "Yes"
        - "'Waiting for source to send event' in replication_status.Replica_IO_State"
      retries: 15
      delay: 5

    - name: Запуск WordPress
      community.docker.docker_container:
        name: wordpress
        image: wordpress:latest
        networks:
          - name: wp_network
        restart_policy: always
        published_ports:
          - "80:80"
        env:
          WORDPRESS_DB_HOST: "mysql_master:3306"
          WORDPRESS_DB_NAME: "{{ mysql_database }}"
          WORDPRESS_DB_USER: "{{ mysql_user }}"
          WORDPRESS_DB_PASSWORD: "{{ mysql_password }}"

    - name: Проверка работы WordPress
      uri:
        url: "http://{{ ansible_host }}:80"
        status_code: 200
        timeout: 10
      register: wordpress_status
      until: wordpress_status.status == 200
      retries: 15
      delay: 5

    - name: Создание пользователя для MySQL Exporter (на Master)
      community.mysql.mysql_user:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        login_host: "{{ ansible_host }}"
        login_port: 3306
        name: "{{ exporter_user }}"
        password: "{{ exporter_password }}"
        host: "%"
        priv: "*.*:PROCESS,REPLICATION CLIENT,SELECT"
        state: present

    - name: Создание пользователя для MySQL Exporter (на Slave)
      community.mysql.mysql_user:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        login_host: "{{ ansible_host }}"
        login_port: 3307
        name: "{{ exporter_user }}"
        password: "{{ exporter_password }}"
        host: "%"
        priv: "*.*:PROCESS,REPLICATION CLIENT,SELECT"
        state: present

    - name: Создание директории для конфигурации Prometheus
      file:
        path: "{{ prometheus_config_dir }}"
        state: directory
        mode: 0755

    - name: Копирование шаблона конфигурации Prometheus
      template:
        src: prometheus.yml.j2
        dest: "{{ prometheus_config_dir }}/prometheus.yml"
        mode: 0644

    - name: Запуск MySQL Exporter для Master
      community.docker.docker_container:
        name: mysql_exporter_master
        image: prom/mysqld-exporter
        networks:
          - name: wp_network
        volumes:
          - /opt/mysql_exporter/.my.cnf:/etc/.my.cnf:ro
        command: ["--config.my-cnf=/etc/.my.cnf"]
        ports:
          - "9104:9104"
        restart_policy: always

    - name: Запуск MySQL Exporter для Slave
      community.docker.docker_container:
        name: mysql_exporter_slave
        image: prom/mysqld-exporter
        networks:
          - name: wp_network
        volumes:
          - /opt/mysql_exporter/.my.cnf:/etc/.my.cnf:ro
        command: ["--config.my-cnf=/etc/.my.cnf"]
        ports:
          - "9105:9104"
        restart_policy: always

    - name: Запуск Prometheus
      community.docker.docker_container:
        name: prometheus
        image: prom/prometheus
        networks:
          - name: wp_network
        ports:
          - "9090:9090"
        volumes:
          - /opt/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
        restart_policy: always

    - name: Запуск Grafana
      community.docker.docker_container:
        name: grafana
        image: grafana/grafana
        networks:
          - name: wp_network
        ports:
          - "3000:3000"
        restart_policy: always

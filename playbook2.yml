---
- name: Home work 2
  hosts: carrier
  tasks:
    - name: Install required packages
      become: true
      block:
        - name: Install mysql-client and python3-pymysql packages
          ansible.builtin.apt:
            name:
              - mysql-client=8.0.42-0ubuntu0.24.04.1
              - python3-pymysql=1.0.2-2ubuntu1.1
            state: present
            update_cache: true

        - name: Reset ssh connection to drop privileges
          ansible.builtin.meta: reset_connection

    - name: Deploy a new version of application
      block:
        - community.docker.docker_container_info:
            name: webapp-db2-1
          register: dbinfo2

        - ansible.builtin.meta: end_host
          when:
            - dbinfo2.exists

        - name: Copy webapp/docker-compose.yml
          ansible.builtin.copy:
            dest: webapp/docker-compose.yml
            mode: "0644"
            content: |
              services:
                db:
                  command:
                    - --binlog-do-db={{ wordpress_db_name }}
                    - --log-bin=mysql-bin
                  environment:
                    MYSQL_DATABASE: {{ wordpress_db_name }}
                    MYSQL_USER: {{ db_user }}
                    MYSQL_PASSWORD: {{ db_user_pass }}
                    MYSQL_ROOT_PASSWORD: {{ db_pass }}
                  healthcheck:
                    interval: 10s
                    retries: 20
                    start_period: 1m
                    test: ["CMD-SHELL", "mysql -p$$MYSQL_ROOT_PASSWORD -e 'SELECT 1'"]
                  image: mysql:8.0.41-bookworm
                  restart: unless-stopped
                  volumes:
                    - db:/var/lib/mysql

                db2:
                  command:
                    - --relay-log=slave-relay-bin
                    - --server-id=2
                  depends_on:
                    - db
                  environment:
                    MYSQL_DATABASE: {{ wordpress_db_name }}
                    MYSQL_USER: {{ db_user }}
                    MYSQL_PASSWORD: {{ db_user_pass }}
                    MYSQL_ROOT_PASSWORD: {{ db_pass }}
                  healthcheck:
                    interval: 10s
                    retries: 20
                    start_period: 1m
                    test: ["CMD-SHELL", "mysql -p$$MYSQL_ROOT_PASSWORD -e 'SELECT 1'"]
                  image: mysql:8.0.41-bookworm
                  restart: unless-stopped
                  volumes:
                    - db2:/var/lib/mysql

                wordpress:
                  environment:
                    WORDPRESS_DB_HOST: {{ db_host }}
                    WORDPRESS_DB_USER: {{ db_user }}
                    WORDPRESS_DB_PASSWORD: {{ db_user_pass }}
                    WORDPRESS_DB_NAME: {{ wordpress_db_name }}
                  image: wordpress:6.8.0-php8.4-apache
                  ports:
                    - {{ wordpress_port }}:80
                  restart: unless-stopped
                  volumes:
                    - wordpress:/var/www/html

              volumes:
                db:
                db2:
                wordpress:

        - name: Recreate db and db2 containers
          community.docker.docker_compose_v2:
            project_src: webapp
            wait: true

        - name: Receive info about db container
          community.docker.docker_container_info:
            name: webapp-db-1
          register: dbinfo

        - name: Extract ip address of the db container
          ansible.builtin.set_fact:
            db_ip: "{{ dbinfo.container.NetworkSettings.Networks.webapp_default.IPAddress }}"
          when: dbinfo.exists

        - name: Dump master database
          community.mysql.mysql_db:
            login_host: "{{ db_ip }}"
            login_user: root
            login_password: "{{ db_pass }}"
            master_data: 1
            name: "{{ wordpress_db_name }}"
            state: dump
            target: "{{ db_dump_path }}"

        - name: Create replication user on master
          community.mysql.mysql_user:
            login_host: "{{ db_ip }}"
            login_user: root
            login_password: "{{ db_pass }}"
            name: "{{ db_slave_user }}"
            password: "{{ db_slave_pass }}"
            priv:
              "*.*": "REPLICATION SLAVE"
            host: "%"
            column_case_sensitive: true
            state: present

        - name: Receive info about db2 container
          community.docker.docker_container_info:
            name: webapp-db2-1
          register: dbinfo2

        - name: Extract ip address of the db2 container
          ansible.builtin.set_fact:
            slave_db_ip: "{{ dbinfo2.container.NetworkSettings.Networks.webapp_default.IPAddress }}"
          when: dbinfo2.exists

        - name: Stop replication if exists
          community.mysql.mysql_replication:
            login_host: "{{ slave_db_ip }}"
            login_user: root
            login_password: "{{ db_pass }}"
            mode: "stopreplica"

        - name: Change replication source
          community.mysql.mysql_replication:
            login_host: "{{ slave_db_ip }}"
            login_user: root
            login_password: "{{ db_pass }}"
            mode: changereplication
            primary_host: db
            primary_user: "{{ db_slave_user }}"
            primary_password: "{{ db_slave_pass }}"

        - name: Restore database on slave
          community.mysql.mysql_db:
            login_host: "{{ slave_db_ip }}"
            login_user: root
            login_password: "{{ db_pass }}"
            name: "{{ wordpress_db_name }}"
            state: import
            target: "{{ db_dump_path }}"

        - name: Start replication
          community.mysql.mysql_replication:
            login_host: "{{ slave_db_ip }}"
            login_user: root
            login_password: "{{ db_pass }}"
            mode: startreplica

        - name: Get slave status
          community.mysql.mysql_replication:
            login_host: "{{ slave_db_ip }}"
            login_user: root
            login_password: "{{ db_pass }}"
          register: slave_status

        - name: Display slave status
          ansible.builtin.debug:
            msg: "{{ slave_status }}"

    - name: Display Configuration Variables
      ansible.builtin.debug:
        msg:
          - "wordpress: {{ is_wordpress }}" # True or False
          - "wordpress_port: {{ wordpress_port }}" # 80 or 8080 or whatewer
          - "wordpress_db_name: {{ wordpress_db_name }}" # WP database name
          - "db_master: {{ db_master }}" # container name
          - "db_replica: {{ db_replica }}" # container name
          - "db_pass: {{ db_pass }}" # root password for master and replica

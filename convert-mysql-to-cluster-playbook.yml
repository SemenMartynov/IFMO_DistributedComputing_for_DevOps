---
# MySQL InnoDB Cluster
# https://dev.mysql.com/doc/mysql-shell/8.4/en/mysql-innodb-cluster.html
- hosts: all
  become: true
  vars_files:
    - defaults/main.yml

  tasks:
    - name: Generate MySQL password
      ansible.builtin.set_fact: mysql_passwd="{{ pwd_alias }}"

    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true
        
    - name: Install required by Ansible package
      apt: pkg={{ item }} state=present
      with_items:
        - python3-pymysql
        
    - name: Stop WP container
      community.docker.docker_container:
        name: "{{ wp_container_name }}"
        state: stopped

    - name: Backup current WP databases
      mysql_db:
        state: dump
        name: "{{ wp_dbname }}"
        target: /tmp/dump.sql
        login_host: "10.16.1.3"
        login_port: 3306
        login_password: "{{ mysql_root_pw }}"

    - name: Stop standalone MySQL instance
      community.docker.docker_container:
        name: "{{ db_container_name }}"
        state: stopped

#    - name: Create MySQL conf dirs for InnoDB cluster
#      ansible.builtin.file:
#        path: mysql{{ item }}.conf.d
#        state: directory
#        mode: '0755'
#      with_sequence: start=1 end=3
      
    - name: Generate MySQL startup configs for InnoDB cluster
      template:
        src: templates/my.cnf.j2
        dest: my{{ item }}.cnf
      with_sequence: start=1 end=3
    
    - name: Init MySQL instances
      community.docker.docker_container:
        name: "{{ db_container_name }}{{ item }}"
        image: "{{ db_container_image }}"
        command: --server-id={{ item }} --gtid-mode=ON --enforce-gtid-consistency=ON --log-error-verbosity=3 --defaults-extra-file=/etc/mysql/mysql.conf.d/my-cl.cnf.cnf
        state: started
        restart_policy: "on-failure"
        networks:
          - name: "{{ wp_int_network }}"
            ipv4_address: "10.16.1.1{{ item }}"
        exposed_ports:
          - 3306
          - 33060
          - 33061
        volumes:
          - db{{ item }}:/var/lib/mysql
          - my{{ item }}.cnf:/etc/mysql/mysql.conf.d/my-cl.cnf:ro
        capabilities:
          - SYS_NICE
        env:
          MYSQL_ROOT_PASSWORD: "{{ mysql_root_pw }}"
#          MYSQL_RANDOM_ROOT_PASSWORD: '1'
#          MYSQL_DATABASE: "{{ wp_dbname }}"
#          MYSQL_USER: "{{ wp_dbuser }}"
#          MYSQL_PASSWORD: "{{ mysql_passwd }}"
      with_sequence: start=1 end=3

    - name: Pause for 50s to start and init MySQL instances
      ansible.builtin.pause:
        seconds: 50

    - name: 'Node #1 will bootstrap the group'
      ignore_errors: true
      community.mysql.mysql_query:
        login_db: mysql
        login_host: "10.16.1.1{{ item }}"
        login_port: 3306
        login_password: "{{ mysql_root_pw }}"
        query:
          - RESET BINARY LOGS AND GTIDS
          - SET SQL_LOG_BIN=0
          - CREATE USER 'repl'@'%' IDENTIFIED BY '{{ mysql_root_pw }}'
          - GRANT CONNECTION_ADMIN, BACKUP_ADMIN, GROUP_REPLICATION_STREAM, REPLICATION SLAVE ON *.* TO 'repl'@'%'
          - FLUSH PRIVILEGES
          - SET SQL_LOG_BIN=1
          - CHANGE REPLICATION SOURCE TO SOURCE_USER='repl', SOURCE_PASSWORD='{{ mysql_root_pw }}' FOR CHANNEL 'group_replication_recovery'
          - INSTALL PLUGIN group_replication SONAME 'group_replication.so'
          - SET PERSIST group_replication_group_name='{{ mysql_root_pw | to_uuid }}'
          - SET PERSIST group_replication_local_address='10.16.1.1{{ item }}:33061'
          - SET PERSIST group_replication_group_seeds='10.16.1.11:33061,10.16.1.12:33061,10.16.1.13:33061'
          - SET GLOBAL group_replication_bootstrap_group=ON
          - START GROUP_REPLICATION USER='repl', PASSWORD='{{ mysql_root_pw }}'
          - SET GLOBAL group_replication_bootstrap_group=OFF
      loop:
        - 1

    - name: Pause for 15s to start MySQL instances
      ansible.builtin.pause:
        seconds: 15

    - name: 'Restore current WP database to node #1'
      mysql_db:
        state: import
        name: "{{ wp_dbname }}"
        target: /tmp/dump.sql
        login_host: "10.16.1.11"
        login_port: 3306
        login_password: "{{ mysql_root_pw }}"

    - name: 'Add nodes #2 and #3 to the group'
      ignore_errors: true
      community.mysql.mysql_query:
        login_db: mysql
        login_host: "10.16.1.1{{ item }}"
        login_port: 3306
        login_password: "{{ mysql_root_pw }}"
        query:
          - RESET BINARY LOGS AND GTIDS
          - SET SQL_LOG_BIN=0
          - CREATE USER 'repl'@'%' IDENTIFIED BY '{{ mysql_root_pw }}'
          - GRANT CONNECTION_ADMIN, BACKUP_ADMIN, GROUP_REPLICATION_STREAM, REPLICATION SLAVE ON *.* TO 'repl'@'%'
          - FLUSH PRIVILEGES
          - SET SQL_LOG_BIN=1
          - CHANGE REPLICATION SOURCE TO SOURCE_USER='repl', SOURCE_PASSWORD='{{ mysql_root_pw }}' FOR CHANNEL 'group_replication_recovery'
          - SET GLOBAL group_replication_group_name='{{ mysql_root_pw | to_uuid }}'
          - INSTALL PLUGIN group_replication SONAME 'group_replication.so'
          - SET PERSIST group_replication_group_name='{{ mysql_root_pw | to_uuid }}'
          - SET PERSIST group_replication_local_address='10.16.1.1{{ item }}:33061'
          - SET PERSIST group_replication_group_seeds='10.16.1.11:33061,10.16.1.12:33061,10.16.1.13:33061'
          - START GROUP_REPLICATION USER='repl', PASSWORD='{{ mysql_root_pw }}'
      with_sequence: start=2 end=3

    - name: Start WP container
      community.docker.docker_container:
        name: "{{ wp_container_name }}"
        state: started

---
# MySQL InnoDB Cluster
# https://dev.mysql.com/doc/mysql-shell/8.4/en/mysql-innodb-cluster.html
- hosts: all
  become: true
  vars_files:
    - defaults/main.yml

  tasks:
    - name: Generate MySQL password
      ansible.builtin.set_fact: mysql_passwd="{{ pwd_alias }}"

    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true
        
    - name: Install required by Ansible package
      apt: pkg={{ item }} state=present
      with_items:
        - python3-pymysql
        
    - name: Create MySQL InnoDB Cluster
      community.docker.docker_container:
        name: "{{ db_container_name }}{{ item }}"
        image: "{{ db_container_image }}"
        command: --server-id={{ item }} --enforce-gtid-consistency='ON' --gtid-mode='ON' --plugin-load='group_replication.so' --group-replication-start-on-boot='OFF' --group-replication-group-name='aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee' --group-replication-local-address="{{ db_container_name }}{{ item }}:3306" --group-replication-group-seeds='{{ db_container_name }}1:3306,{{ db_container_name }}2:3306,{{ db_container_name }}3:3306' --loose-group-replication-single-primary-mode='OFF' --loose-group-replication-enforce-update-everywhere-checks='ON'
        state: started
        restart: yes
        restart_policy: always
        networks:
          - name: "{{ wp_int_network }}"
            ipv4_address: "10.16.1.1{{ item }}"
        exposed_ports:
          - 3306
          - 33060
        volumes:
          - db{{ item }}:/var/lib/mysql
        env:
          MYSQL_ROOT_PASSWORD: "{{ mysql_root_pw }}"
#          MYSQL_RANDOM_ROOT_PASSWORD: '1'
          MYSQL_DATABASE: "{{ wp_dbname }}"
          MYSQL_USER: "{{ wp_dbuser }}"
          MYSQL_PASSWORD: "{{ mysql_passwd }}"
      with_sequence: start=1 end=3

    - name: Pause for 30s to start MySQL instances
      ansible.builtin.pause:
        seconds: 30

    - name: 'Node #1 will bootstrap the group'
      ignore_errors: true
      community.mysql.mysql_query:
        login_db: mysql
        login_host: "10.16.1.1{{ item }}"
        login_port: 3306
        login_password: "{{ mysql_root_pw }}"
        query:
          - SET @@GLOBAL.group_replication_bootstrap_group=1
          - CREATE USER 'repl'@'%' IDENTIFIED BY '{{ mysql_root_pw }}'
          - GRANT BACKUP_ADMIN, CLONE_ADMIN, REPLICATION SLAVE ON *.* TO 'repl'@'%'
          - FLUSH PRIVILEGES
          - CHANGE MASTER TO MASTER_USER='repl', MASTER_PASSWORD = '{{ mysql_root_pw }}' FOR CHANNEL 'group_replication_recovery'
          - START GROUP_REPLICATION
          - SET @@GLOBAL.group_replication_bootstrap_group=0
      loop:
        - 1

    - name: 'Add nodes #2 and #3 to the group'
      ignore_errors: true
      community.mysql.mysql_query:
        login_db: mysql
        login_host: "10.16.1.1{{ item }}"
        login_port: 3306
        login_password: "{{ mysql_root_pw }}"
        query:
          - CHANGE MASTER TO MASTER_USER='repl', MASTER_PASSWORD = '{{ mysql_root_pw }}' FOR CHANNEL 'group_replication_recovery'
          - START GROUP_REPLICATION
      with_sequence: start=2 end=3
      
    - name: Stop WP container
      community.docker.docker_container:
        name: "{{ wp_container_name }}"
        state: stopped

    - name: Backup current WP databases
      mysql_db:
        state: dump
        name: all
        target: /tmp/dump.sql
        login_host: "10.16.1.3"
        login_port: 3306
        login_password: "{{ mysql_root_pw }}"

    - name: Start WP container
      community.docker.docker_container:
        name: "{{ wp_container_name }}"
        state: started

- name: Convert stanalone MySQL instance to MySQL InnoDB Cluster
  hosts: all
  become: true
  vars_files:
    - defaults/main.yml
  tasks:
    - name: Generate MySQL password
      ansible.builtin.set_fact:
        mysql_passwd: '{{ pwd_alias }}'
    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true
    - name: Add MySQL GPG apt Key
      apt_key:
        keyserver: pgp.mit.edu
        id: BCA43417C3B485DD128EC6D4B7B3B788A8D3785C
        state: present
    - name: Add MySQL Repository
      apt_repository:
        repo: >-
          deb http://repo.mysql.com/apt/ubuntu/ {{ ansible_lsb.codename }}
          mysql-{{ mysql_release_version }}-lts
        state: present
    - name: Install required packages
      apt:
        pkg:
          - python3-pymysql
          - mysql-client
          - mysql-shell
        state: latest
        update_cache: true
    - name: Stop WP container
      community.docker.docker_container:
        name: '{{ wp_container_name }}'
        state: stopped
    - name: Backup current WP databases
      mysql_db:
        state: dump
        name: '{{ wp_dbname }}'
        target: '{{ wp_mysql_dump }}'
        login_host: 10.16.1.3
        login_port: 3306
        login_password: '{{ mysql_root_pw }}'
    - name: Remove standalone MySQL instance
      community.docker.docker_container:
        name: '{{ db_container_name }}'
        state: absent
    - name: Init MySQL instances
#      notify:
#        - Wait for MySQL server to restart
      community.docker.docker_container:
        name: '{{ db_container_name }}{{ item }}'
        hostname: '{{ db_container_name }}{{ item }}'
        image: '{{ db_container_image }}'
        command: >-
          --server-id={{ item }} --gtid-mode=ON --enforce-gtid-consistency=ON
          --skip-name-resolve=ON --log-error-verbosity=3
          --report-host='10.16.1.1{{ item }}' --report-port='3306'
        state: started
        restart_policy: on-failure
        networks:
          - name: '{{ wp_int_network }}'
            ipv4_address: '10.16.1.1{{ item }}'
            aliases: '{{ db_container_name }}{{ item }}'
        exposed_ports:
          - 3306
          - 33060
          - 33061
        volumes:
          - 'db{{ item }}:/var/lib/mysql'
        capabilities:
          - SYS_NICE
        env:
          MYSQL_ROOT_PASSWORD: '{{ mysql_root_pw }}'
          MYSQL_ROOT_HOST: '%'
          MYSQL_DATABASE: '{{ wp_dbname }}'
          MYSQL_USER: '{{ wp_dbuser }}'
          MYSQL_PASSWORD: '{{ mysql_passwd }}'
      with_sequence: start=1 end=3
    - name: Wait for MySQL server to start
      local_action:
        module: ansible.builtin.wait_for
          host='10.16.1.13'
          port=3306
          delay=10
        become: false
    - name: Generate MySQL SHELL config
      template:
        src: templates/mysqlsh_create_cluster.js.j2
        dest: create_cluster.js
    - name: Run MySQL SHELL script to create Cluster
      ansible.builtin.command: >-
        mysqlsh --no-wizard --log-level=DEBUG3 --uri 'root@10.16.1.11' -p'{{
        mysql_root_pw }}' -f create_cluster.js
      register: myshell_result
    - name: MySQL SHELL script result
      debug:
        var: myshell_result.stdout_lines
    - name: Install MySQLRouter
      notify:
        - Wait for MySQL Router to restart
      community.docker.docker_container:
        name: mysqlrouter
        image: '{{ mysqlrouter_container_image }}'
        state: started
        restart_policy: on-failure
        networks:
          - name: '{{ wp_int_network }}'
            ipv4_address: 10.16.1.10
        exposed_ports:
          - 6446
          - 6447
          - 6448
          - 6449
          - 8443
        env:
          MYSQL_HOST: 10.16.1.11
          MYSQL_PORT: '3306'
          MYSQL_USER: root
          MYSQL_PASSWORD: '{{ mysql_root_pw }}'
          MYSQL_INNODB_CLUSTER_MEMBERS: '3'
    - name: 'Restore current WP database to node #1'
      mysql_db:
        state: import
        name: '{{ wp_dbname }}'
        target: '{{ wp_mysql_dump }}'
        login_host: 10.16.1.11
        login_port: 3306
        login_password: '{{ mysql_root_pw }}'
    - name: Start WP container
      community.docker.docker_container:
        name: '{{ wp_container_name }}'
        image: '{{ wp_container_image }}'
        state: started
        recreate: true
        restart: true
        restart_policy: on-failure
        networks:
          - name: '{{ wp_int_network }}'
            aliases: wpint
            ipv4_address: 10.16.1.2
          - name: '{{ wp_ext_network }}'
            aliases: wp
        ports:
          - '80:80'
        volumes:
          - 'wordpress:/var/www/html'
        env:
          WORDPRESS_DB_HOST: 'mysqlrouter:6446'
          WORDPRESS_DB_USER: '{{ wp_dbuser }}'
          WORDPRESS_DB_PASSWORD: '{{ mysql_passwd }}'
          WORDPRESS_DB_NAME: '{{ wp_dbname }}'
# https://stackoverflow.com/questions/23877781/how-to-wait-for-server-restart-using-ansible
  handlers:
    - name: Wait for MySQL Router to restart
      local_action:
        module: ansible.builtin.wait_for
          host='10.16.1.10'
          port=6446
          delay=10
        become: false
    - name: Wait for MySQL server to restart
      local_action:
        module: ansible.builtin.wait_for
          host='10.16.1.13'
          port=3306
          delay=10
        become: false

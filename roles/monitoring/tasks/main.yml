---
- name: Создать Docker-тома для Prometheus и Grafana
  community.docker.docker_volume:
    name: "{{ item }}"
  loop:
    - prometheus_data
    - grafana_data

- name: Скопировать конфигурацию Prometheus
  ansible.builtin.copy:
    src: prometheus.yml
    dest: /home/{{ server_user }}/prometheus.yml
    mode: '0644'

- name: Запустить Prometheus контейнер
  community.docker.docker_container:
    name: prometheus
    image: "{{ monitoring_prometheus_image }}"
    restart_policy: always
    ports:
      - "{{ prometheus_port }}:9090"
    volumes:
      - prometheus_data:/prometheus
      - /home/{{ server_user }}/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - name: wp_net
    state: started

- name: Запустить Grafana контейнер
  community.docker.docker_container:
    name: grafana
    image: "{{ monitoring_grafana_image }}"
    restart_policy: always
    ports:
      - "{{ grafana_port }}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - name: wp_net
    env:
      GF_SECURITY_ADMIN_USER: "{{ monitoring_grafana_user }}"
      GF_SECURITY_ADMIN_PASSWORD: "{{ monitoring_grafana_password }}"
    state: started

- name: Создать директорию для MySQL Exporter
  ansible.builtin.file:
    path: /home/{{ server_user }}/monitoring
    state: directory
    mode: '0755'

- name: Создать конфигурационные файлы для MySQL Exporter
  ansible.builtin.template:
    src: config.my-cnf.j2
    dest: /home/{{ server_user }}/monitoring/{{ item.name }}_config.my-cnf
    mode: '0644'
  loop:
    - { name: "mysql_master_exporter", host: "{{ mysql_master_ip }}" }
    - { name: "mysql_slave_exporter", host: "{{ mysql_slave_ip }}" }

- name: Установить MySQL Exporter на Master и Slave с конфигурационными файлами
  community.docker.docker_container:
    name: "{{ item.name }}"
    image: "{{ monitoring_exporter_image }}"
    restart_policy: always
    command: '--config.my-cnf=/cfg/config.my-cnf'
    volumes:
      - "/home/{{ server_user }}/monitoring/{{ item.name }}_config.my-cnf:/cfg/config.my-cnf:ro"
    networks:
      - name: wp_net
    state: started
  loop:
    - { name: "mysql_master_exporter" }
    - { name: "mysql_slave_exporter" }

- name: Проверить доступность Grafana через HTTP
  ansible.builtin.uri:
    url: "http://localhost:{{ grafana_port }}/api/health"
    method: GET
    return_content: true
    status_code: 200
  register: grafana_health
  until: grafana_health.status == 200
  retries: 5
  delay: 10

- name: Настроить Prometheus как источник данных в Grafana
  community.grafana.grafana_datasource:
    url: "http://localhost:{{ grafana_port }}"
    grafana_user: "{{ monitoring_grafana_user }}"
    grafana_password: "{{ monitoring_grafana_password }}"
    name: "Prometheus"
    ds_type: "prometheus"
    ds_url: "http://prometheus:{{ prometheus_port }}"
    access: "proxy"
    is_default: true
    time_interval: "5s"
    uid: "{{ monitoring_prometheus_uid }}"
    state: present

- name: Скачать дашборд MySQL Overview
  ansible.builtin.uri:
    url: "{{ monitoring_dashboard_url }}"
    dest: "/home/{{ server_user }}/monitoring/{{ monitoring_dashboard_file }}"
    method: GET
    headers:
      Accept: "application/json"
    return_content: true

- name: Установить в JSON актуальную переменную DS_PROMETHEUS
  ansible.builtin.replace:
    path: "/home/{{ server_user }}/monitoring/{{ monitoring_dashboard_file }}"
    regexp: '\${DS_PROMETHEUS}'
    replace: '{{ monitoring_prometheus_uid }}'

- name: Добавить обновленный дашборд в Grafana
  community.grafana.grafana_dashboard:
    url: "http://localhost:{{ grafana_port }}"
    grafana_user: "{{ monitoring_grafana_user }}"
    grafana_password: "{{ monitoring_grafana_password }}"
    dashboard_url: "/home/{{ server_user }}/monitoring/{{ monitoring_dashboard_file }}"
    state: present
    overwrite: true

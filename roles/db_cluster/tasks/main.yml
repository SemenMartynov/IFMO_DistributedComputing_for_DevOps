---
- name: Create network for database cluster
  docker_network:
    name: db_cluster_network
    state: present

- name: Create primary database node
  docker_container:
    name: mysql_primary
    image: mysql:8.0
    state: present
    restart_policy: always
    networks:
      - name: db_cluster_network
    env:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: wordpress_db
      MYSQL_USER: wordpress_user
      MYSQL_PASSWORD: wordpress_password
      MYSQL_INIT_COMMAND: |
        SET GLOBAL group_replication_bootstrap_group=ON;
        CHANGE MASTER TO MASTER_USER='root', MASTER_PASSWORD='root_password' FOR CHANNEL 'group_replication_recovery';
        START GROUP_REPLICATION;
        SET GLOBAL group_replication_bootstrap_group=OFF;
    volumes:
      - primary_db_data:/var/lib/mysql
      - ./templates/my.cnf:/etc/mysql/conf.d/my.cnf
    command: --default-authentication-plugin=mysql_native_password --server-id=1 --log-bin='mysql-bin' --binlog_checksum=NONE --gtid_mode=ON --enforce-gtid-consistency=ON --log-slave-updates=ON --transaction-write-set-extraction=XXHASH64 --loose-group_replication_group_name="aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa" --loose-group_replication_start_on_boot=on --loose-group_replication_bootstrap_group=on --loose-group_replication_single_primary_mode=on

- name: Create secondary database node 1
  docker_container:
    name: mysql_secondary1
    image: mysql:8.0
    state: present
    restart_policy: always
    networks:
      - name: db_cluster_network
    env:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: wordpress_db
      MYSQL_USER: wordpress_user
      MYSQL_PASSWORD: wordpress_password
      MYSQL_INIT_COMMAND: |
        CHANGE MASTER TO MASTER_USER='root', MASTER_PASSWORD='root_password' FOR CHANNEL 'group_replication_recovery';
        START GROUP_REPLICATION;
    volumes:
      - secondary1_db_data:/var/lib/mysql
      - ./templates/my.cnf:/etc/mysql/conf.d/my.cnf
    command: --default-authentication-plugin=mysql_native_password --server-id=2 --log-bin='mysql-bin' --binlog_checksum=NONE --gtid_mode=ON --enforce-gtid-consistency=ON --log-slave-updates=ON --transaction-write-set-extraction=XXHASH64 --loose-group_replication_group_name="aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa" --loose-group_replication_start_on_boot=on --loose-group_replication_single_primary_mode=on

- name: Create secondary database node 2
  docker_container:
    name: mysql_secondary2
    image: mysql:8.0
    state: present
    restart_policy: always
    networks:
      - name: db_cluster_network
    env:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: wordpress_db
      MYSQL_USER: wordpress_user
      MYSQL_PASSWORD: wordpress_password
      MYSQL_INIT_COMMAND: |
        CHANGE MASTER TO MASTER_USER='root', MASTER_PASSWORD='root_password' FOR CHANNEL 'group_replication_recovery';
        START GROUP_REPLICATION;
    volumes:
      - secondary2_db_data:/var/lib/mysql
      - ./templates/my.cnf:/etc/mysql/conf.d/my.cnf
    command: --default-authentication-plugin=mysql_native_password --server-id=3 --log-bin='mysql-bin' --binlog_checksum=NONE --gtid_mode=ON --enforce-gtid-consistency=ON --log-slave-updates=ON --transaction-write-set-extraction=XXHASH64 --loose-group_replication_group_name="aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa" --loose-group_replication_start_on_boot=on --loose-group_replication_single_primary_mode=on

- name: Wait for primary MySQL to be ready
  wait_for:
    port: 3306
    delay: 10
    timeout: 300
    state: started
    host: mysql_primary

- name: Wait for secondary MySQL nodes to be ready
  wait_for:
    port: 3306
    delay: 10
    timeout: 300
    state: started
    host: "{{ item }}"
  with_items:
    - mysql_secondary1
    - mysql_secondary2 
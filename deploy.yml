---
- name: Деплой Wordpress и  Mysql в Docker
  hosts: webserver
  become: true
  vars_files:
    - vars.yml
  tasks:
    - name: Создать директорию проекта
      file:
        path: wordpress/
        state: directory

    - name: Создать volume db_data
      community.docker.docker_volume:
        name: db_data

    - name: Создать сеть Docker
      community.docker.docker_network:
        name: wpnet
        state: present

    - name: Запустить контейнер MySQL
      community.docker.docker_container:
        name: wordpress_db
        image: mysql:8.0
        restart_policy: always
        env:
          MYSQL_DATABASE: "{{ mysql_database }}"
          MYSQL_USER: "{{ mysql_user }}"
          MYSQL_PASSWORD: "{{ mysql_password }}"
          MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
        volumes:
          - "db_data:/var/lib/mysql"
        published_ports:
          - "3306:3306"
        networks:
          - name: wpnet

    - name: Проверка доступности MySQL
      community.mysql.mysql_info:
        login_port: "{{ mysql_master_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
      register: mysql_check
      retries: 10
      delay: 3
      until: mysql_check is succeeded

    - name: Запустить контейнер Wordpress
      community.docker.docker_container:
        name: wordpress
        image: wordpress:latest
        restart_policy: always
        env:
          WORDPRESS_DB_HOST: wordpress_db:3306
          WORDPRESS_DB_USER: "{{ mysql_user }}"
          WORDPRESS_DB_PASSWORD: "{{ mysql_password }}"
          WORDPRESS_DB_NAME: "{{ mysql_database }}"
        published_ports:
          - "80:80"
        networks:
          - name: wpnet

    - name: Проверка доступности MySQL
      community.mysql.mysql_info:
        login_port: "{{ mysql_master_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
      register: mysql_check
      retries: 10
      delay: 3
      until: mysql_check is succeeded

    # =======ДЗ2=======

    - name: Создать дамп базы данных и сохранить на хосте
      community.mysql.mysql_db:
        state: dump
        name:
          - all
        target: "{{ project_dir }}/wordpress_dump.sql"
        login_host: "127.0.0.1"
        login_port: "{{ mysql_master_port }}"
        login_user: "{{ mysql_root_login }}"
        login_password: "{{ mysql_root_password }}"

    - name: Остановить и удалить оба контенйера
      community.docker.docker_container:
        name: "{{ item }}"
        state: absent
        force_kill: true
        cleanup: true
      loop:
        - wordpress
        - wordpress_db
    
    - name: Удалить том db_data
      community.docker.docker_volume:
        name: db_data
        state: absent

    - name: Скопировать master_init.sql
      copy:
        src: master_init.sql
        dest: wordpress/master_init.sql

    - name: Создать тома для мастера и слейва
      community.docker.docker_volume:
        name: "{{ item }}"
      loop:
        - mysql_master_data
        - mysql_slave_data

    - name: Запустить mysql-master
      community.docker.docker_container:
        name: mysql-master
        image: mysql:8.0
        restart_policy: always
        env:
          MYSQL_DATABASE: "{{ mysql_database }}"
          MYSQL_USER: "{{ mysql_user }}"
          MYSQL_PASSWORD: "{{ mysql_password }}"
          MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
        command: 
          - --log-bin=mysql-bin 
          - --server-id=1 
          - --binlog-do-db={{ mysql_database }}
          - --default-authentication-plugin=mysql_native_password
        volumes:
          - mysql_master_data:/var/lib/mysql
        published_ports:
          - "3306:3306"
        networks:
          - name: wpnet

    - name: Запустить mysql-slave
      community.docker.docker_container:
        name: mysql-slave
        image: mysql:8.0
        restart_policy: always
        env:
          MYSQL_DATABASE: "{{ mysql_database }}"
          MYSQL_USER: "{{ mysql_user }}"
          MYSQL_PASSWORD: "{{ mysql_password }}"
          MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
        command: 
          - --server-id=2 
          - --relay-log=slave-relay-bin 
          - --read-only=1
        volumes:
          - mysql_slave_data:/var/lib/mysql
        published_ports:
          - "3307:3306"
        networks:
          - name: wpnet

    - name: Проверка доступности MySQL_2
      community.mysql.mysql_info:
        login_port: "{{ mysql_master_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
      register: mysql_check
      retries: 10
      delay: 3
      until: mysql_check is succeeded

    - name: Запустить контейнер Wordpress
      community.docker.docker_container:
        name: wordpress
        image: wordpress:latest
        restart_policy: always
        env:
          WORDPRESS_DB_HOST: mysql-master:3306
          WORDPRESS_DB_USER: "{{ mysql_user }}"
          WORDPRESS_DB_PASSWORD: "{{ mysql_password }}"
          WORDPRESS_DB_NAME: "{{ mysql_database }}"
        published_ports:
          - "80:80"
        networks:
          - name: wpnet  

    - name: Выполнить master_init.sql
      community.mysql.mysql_db:
        state: import
        name:
          - all
        target: "{{ project_dir }}/master_init.sql"
        login_host: "127.0.0.1"
        login_port: "{{ mysql_master_port }}"
        login_user: "{{ mysql_root_login }}"
        login_password: "{{ mysql_root_password }}"

    - name: Выполнить дамп на мастере
      community.mysql.mysql_db:
        state: import
        name:
          - all
        target: "{{ project_dir }}/wordpress_dump.sql"
        login_host: "127.0.0.1"
        login_port: "{{ mysql_master_port }}"
        login_user: "{{ mysql_root_login }}"
        login_password: "{{ mysql_root_password }}"

    - name: Удалить дамп после восстановления
      file:
        path: "{{ project_dir }}/wordpress_dump.sql"
        state: absent

    - name: Получить координаты binlog с мастера
      community.mysql.mysql_query:
        login_port: "{{ mysql_master_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        query: "SHOW MASTER STATUS"
      register: master_status
      become: false

    - name: Сохранить MASTER_LOG_FILE и MASTER_LOG_POS в перменные
      set_fact:
        master_log_file: "{{ master_status.query_result[0][0].File }}"
        master_log_pos: "{{ master_status.query_result[0][0].Position }}"

    - name: Настроить репликацию на слейв-сервере
      community.mysql.mysql_query:
        login_port: "{{ mysql_slave_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        query: >
          CHANGE MASTER TO
            MASTER_HOST='mysql-master',
            MASTER_USER='replica_user',
            MASTER_PASSWORD='{{ MASTER_PASSWORD }}',
            MASTER_LOG_FILE='{{ master_log_file }}',
            MASTER_LOG_POS={{ master_log_pos }};

    - name: Запустить репликацию на слейв-сервере 
      community.mysql.mysql_query:
        login_port: "{{ mysql_slave_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        query: "START SLAVE;"

    - name: Проверить статус репликации на слейве
      community.mysql.mysql_query:
        login_port: "{{ mysql_slave_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        query: "SHOW SLAVE STATUS"
      register: slave_status
      become: false

    - name: Вывести статус репликации
      debug:
        var: slave_status

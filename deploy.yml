---
- name: Деплой Wordpress и  Mysql в Docker
  hosts: webserver
  become: true
  vars_files:
    - vars.yml
  tasks:
    - name: Создать директорию проекта
      file:
        path: wordpress/
        state: directory
      tags: create

    - name: Скопировать docker-compose.yml на сервер
      template:
        src: docker-compose.yml.j2
        dest: wordpress/docker-compose.yml
      tags: copy1

    - name: Скопировать master_create_tes.sql
      copy:
        src: master_create_test.sql
        dest: wordpress/master_create_test.sql

    - name: Запустить Wordpress и Mysql
      community.docker.docker_compose:
        project_src: "{{ project_dir }}"
        state: present
      # command: docker-compose up -d
      # args:
      #   chdir: wordpress/
      # tags: play

    - name: Проверка доступности MySQL
      community.mysql.mysql_info:
        login_port: "{{ mysql_master_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
      register: mysql_check
      retries: 10
      delay: 3
      until: mysql_check is succeeded

    # - name: Подтвердить продолжение
    #   pause:
    #     prompt: "Продолжить? Нажми Enter"

    - name: Создать дамп базы данных и сохранить на хосте
      community.mysql.mysql_db:
        state: dump
        name:
          - all
        target: "{{ project_dir }}/wordpress_dump.sql"
        login_host: "127.0.0.1"
        login_port: "{{ mysql_master_port }}"
        login_user: "{{ mysql_root_login }}"
        login_password: "{{ mysql_root_password }}"

    - name: Остановить и удалить контейнеры из ДЗ1
      community.docker.docker_compose:
        project_src: wordpress/
        state: absent
      # command: docker-compose down
      # args:
      #   chdir: wordpress/

    - name: Скопировать docker-compose_dz2.yml.j2 на сервер
      template:
        src: docker-compose_dz2.yml.j2
        dest: wordpress/docker-compose.yml

    - name: Скопировать master_init.sql
      copy:
        src: master_init.sql
        dest: wordpress/master_init.sql

    - name: Запустить инстанс Wordpress, mysql-master, mysql-slave
      community.docker.docker_compose:
        project_src: "{{ project_dir }}"
        state: present

    - name: Проверка доступности MySQL_2
      community.mysql.mysql_info:
        login_port: "{{ mysql_master_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
      register: mysql_check
      retries: 10
      delay: 3
      until: mysql_check is succeeded

    - name: Выполнить дамп на мастере
      community.mysql.mysql_db:
        state: import
        name:
          - all
        target: "{{ project_dir }}/wordpress_dump.sql"
        login_host: "127.0.0.1"
        login_port: "{{ mysql_master_port }}"
        login_user: "{{ mysql_root_login }}"
        login_password: "{{ mysql_root_password }}"

    - name: Удалить дамп после восстановления
      file:
        path: "{{ project_dir }}/wordpress_dump.sql"
        state: absent

    - name: Получить координаты binlog с мастера
      community.mysql.mysql_query:
        login_port: "{{ mysql_master_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        query: "SHOW MASTER STATUS"
      register: master_status
      become: false

    - name: Сохранить MASTER_LOG_FILE и MASTER_LOG_POS в перменные
      set_fact:
        master_log_file: "{{ master_status.query_result[0][0].File }}"
        master_log_pos: "{{ master_status.query_result[0][0].Position }}"

    - name: Настроить репликацию на слейв-сервере
      community.mysql.mysql_query:
        login_port: "{{ mysql_slave_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        query: >
          CHANGE MASTER TO
            MASTER_HOST='mysql-master',
            MASTER_USER='replica_user',
            MASTER_PASSWORD='{{ MASTER_PASSWORD }}',
            MASTER_LOG_FILE='{{ master_log_file }}',
            MASTER_LOG_POS={{ master_log_pos }};

    - name: Запустить репликацию на слейв-сервере 
      community.mysql.mysql_query:
        login_port: "{{ mysql_slave_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        query: "START SLAVE;"

    - name: Проверить статус репликации на слейве
      community.mysql.mysql_query:
        login_port: "{{ mysql_slave_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        query: "SHOW SLAVE STATUS"
      register: slave_status
      become: false

    - name: Вывести статус репликации
      debug:
        var: slave_status

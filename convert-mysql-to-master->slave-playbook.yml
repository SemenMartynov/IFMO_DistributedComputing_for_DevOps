- name: Playbook converts standalone mysql instance to master->slave replication
  hosts: all
  become: true
  vars_files:
    - defaults/main.yml
  vars:
    dbslave_container_name: '{{ db_container_name }}slave'
  tasks:
    - name: Generate MySQL password
      ansible.builtin.set_fact:
        mysql_passwd: '{{ pwd_alias }}'
    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true
    - name: Install packages required by Ansible modules
      apt:
        pkg:
          - python3-pymysql
          - mysql-client
        state: latest
        update_cache: true
    - name: Create MySQL container for SLAVE
      community.docker.docker_container:
        name: '{{ dbslave_container_name }}'
        image: '{{ db_container_image }}'
        command: >-
          --server-id=2 --gtid-mode=ON --enforce-gtid-consistency=ON
          --plugin-load-add='clone=mysql_clone.so'
        state: started
        restart: true
        restart_policy: on-failure
        networks:
          - name: '{{ wp_int_network }}'
            ipv4_address: 10.16.1.4
            aliases: '{{ dbslave_container_name }}'
        exposed_ports:
          - 3306
          - 33060
        volumes:
          - 'db2:/var/lib/mysql'
        env:
          MYSQL_ROOT_PASSWORD: '{{ mysql_root_pw }}'
          MYSQL_ROOT_HOST: '%'
    - name: Wait for MySQL SLAVE instance to start
      ansible.builtin.wait_for:
        host: '10.16.1.4'
        port: 3306
        delay: 10
      delegate_to: localhost
    - name: Stop WP container
      community.docker.docker_container:
        name: '{{ wp_container_name }}'
        state: stopped
    - name: Backup current WP databases just for sake of safety
      mysql_db:
        state: dump
        name: all
        target: '{{ wp_mysql_dump }}'
        login_host: 10.16.1.3
        login_port: 3306
        login_password: '{{ mysql_root_pw }}'
    - name: Create replication user on MASTER and SLAVE
      community.mysql.mysql_user:
        login_host: '{{ item }}'
        login_port: 3306
        login_password: '{{ mysql_root_pw }}'
        name: replica_user
        host: '%'
        plugin_auth_string: '{{ mysql_root_pw }}'
        plugin: caching_sha2_password
        priv: '*.*:BACKUP_ADMIN, CLONE_ADMIN, REPLICATION SLAVE'
        state: present
      loop:
        - 10.16.1.3
        - 10.16.1.4
    - name: Prepare MASTER for Cloning
      community.mysql.mysql_query:
        login_db: mysql
        login_host: 10.16.1.3
        login_port: 3306
        login_password: '{{ mysql_root_pw }}'
        query:
          - SET PERSIST_ONLY server_id = 1
          - SET PERSIST_ONLY enforce_gtid_consistency = ON
          - SET PERSIST_ONLY gtid_mode = ON
          - INSTALL PLUGIN clone SONAME 'mysql_clone.so'
    - name: Restart MySQL MASTER container
      community.docker.docker_container:
        name: '{{ db_container_name }}'
        state: started
        restart: true
    - name: Wait for MySQL MASTER instance to start
      ansible.builtin.wait_for:
        host: '10.16.1.3'
        port: 3306
        delay: 10
      delegate_to: localhost
    - name: Cloning DB from MASTER to SLAVE
      ignore_errors: true
      community.mysql.mysql_query:
        login_db: mysql
        login_host: 10.16.1.4
        login_port: 3306
        login_password: '{{ mysql_root_pw }}'
        query:
          - 'SET GLOBAL clone_valid_donor_list = ''{{ db_container_name }}:3306'''
          - >-
            CLONE INSTANCE FROM 'replica_user'@'{{ db_container_name }}':3306
            IDENTIFIED BY '{{ mysql_root_pw }}'
    - name: Wait SLAVE restarting after CLONE
      ansible.builtin.wait_for:
        host: '10.16.1.4'
        port: 3306
        delay: 10
      delegate_to: localhost
    - name: Set and Start replication on SLAVE
      community.mysql.mysql_replication:
        login_host: 10.16.1.4
        login_port: 3306
        login_password: '{{ mysql_root_pw }}'
        mode: '{{ item }}'
        channel: db1s
        primary_auto_position: true
        primary_host: '{{ db_container_name }}'
        primary_port: 3306
        primary_user: replica_user
        primary_password: '{{ mysql_root_pw }}'
      loop:
        - changereplication
        - startreplica
    - name: Start WP container
      community.docker.docker_container:
        name: '{{ wp_container_name }}'
        state: started
